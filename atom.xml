<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>eneim&#39;s log</title>
  <subtitle>the simple, the best</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://eneim.github.io/"/>
  <updated>2017-06-03T06:56:11.000Z</updated>
  <id>https://eneim.github.io/</id>
  
  <author>
    <name>Nam Nguyen</name>
    <email>nam@ene.im</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Why you should call setAdapter(null)</title>
    <link href="https://eneim.github.io/2017/06/03/Why-you-should-call-setAdapter-null/"/>
    <id>https://eneim.github.io/2017/06/03/Why-you-should-call-setAdapter-null/</id>
    <published>2017-06-03T06:44:04.000Z</published>
    <updated>2017-06-03T06:56:11.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>TL;DR</strong>: Always call <code>RecyclerView#setAdapter(null)</code> before your <code>RecyclerView</code> is going away (in <code>onDestroy/onDestroyView/...</code>).</p>
<h1 id="1-Problem"><a href="#1-Problem" class="headerlink" title="1. Problem"></a>1. Problem</h1><p>In common tutorials about RecyclerView out there, you may see this quite frequently, inside an <code>Activity</code>‘s <code>onCreate</code> or a <code>Fragment</code>‘s <code>onCreateView</code>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">mAdapter = <span class="keyword">new</span> MyCoolAdapter(); <span class="comment">// here mAdapter is a member of enclosing class.</span></div><div class="line">recyclerView.setAdapter(adapter);</div></pre></td></tr></table></figure>
<p>It is pretty common step when one initialize his/her screen’s <code>RecyclerView</code>. But I rarely see people telling those “learners” what should them do on the “terminal” point. I mean, does anyone care about tearing down the RecyclerView after all?</p>
<p>One may ask: what’s wrong with that? Is <code>Activity</code> destroying everything after it is destroyed?</p>
<p>Well, for your curiosity: <strong>Will it be destroyed</strong>?</p>
<p>Let’s take a quick look at this question on StackOverflow: <a href="https://stackoverflow.com/questions/30132643/recyclerview-doesnt-unregister-itself-from-the-adapter-on-orientation-change" target="_blank" rel="external"><code>RecyclerView</code> doesn’t unregister itself from the adapter on orientation change</a>. I bet everyone can easily find the problem as well as the answer for it. But let me talk a bit more.</p>
<p><strong>Check points to ‘The Problem’</strong>:</p>
<ul>
<li><p>If you have used RecyclerView quite a while, you may know there are couples of useful callback for Adapter: <code>Adapter#onAttachedToRecyclerView(RecyclerView), Adapter#onDetachedFromRecyclerView(RecyclerView), Adapter#onViewAttachedToWindow(ViewHolder), Adapter#onViewDetachedFromWindow(ViewHolder)</code>.</p>
</li>
<li><p>Have you ever debuged to see when they are called? Let me sort them out for you:</p>
<ul>
<li><code>onAttachedToRecyclerView</code> is called when the Adapter is set to RecyclerView, after a call to <code>RecyclerView#setAdapter(Adapter)</code> or <code>RecyclerView#swapAdapter(Adapter, boolean)</code>. This is quite obvious.</li>
<li><code>onDetachedFromRecyclerView</code>, on the other hand, is called when current Adapter if going to be replaced by <strong><em>another Adapter</em></strong> (this another ‘Adapter’ can be Null). What is the point here: <strong>if you don’t replace the Adapter, this method will never be called.</strong> And what happens if an Adapter is never be “detached” from a RecyclerView? Let’s see after I explain about the other couples.</li>
<li><code>onViewAttachedToWindow</code> is called once RecyclerView or its LayoutManager add a View into RecyclerView (hint: go to <code>RecyclerView</code> source code and search for the following keywords: <a href="https://android.googlesource.com/platform/frameworks/support/+/refs/heads/master/v7/recyclerview/src/android/support/v7/widget/RecyclerView.java#6831" target="_blank" rel="external">dispatchChildAttached</a>).</li>
<li><code>onViewDetachedFromWindow</code>, on opposite, is called when RecyclerView or its LayoutManager detach a View from current Window.</li>
</ul>
</li>
<li><p>What happens when an <code>Adapter</code> is not <em>detached</em> from a <code>RecyclerView</code>? The couple of attach/detach call to an Adapter is tight to another “couple method” of Adapter: <code>registerAdapterDataObserver/unregisterAdapterDataObserver</code>. In fact, <code>registerAdapterDataObserver</code> is always called with (right before) <code>onAttachedToRecyclerView</code> and <code>unregisterAdapterDataObserver</code> is always called with (right before) <code>onDetachedFromRecyclerView</code>. In depth, <code>Adapter#registerAdapterDataObserver(AdapterDataObserver)</code> will add an instance of <code>AdapterDataObserver</code> to its observer system, to broadcast the changes to <code>RecycleView</code>‘s ecosystem. And <code>unregisterAdapterDataObserver</code> will clean it up. <code>RecyclerView</code> holds an instance of <code>RecyclerViewDataObserver</code> which is a <strong>non-static inner class</strong> that extends AdapterDataObserver (hint: go searching for <code>mObserver</code> in <code>RecyclerView</code> source code). So here you see the problem?</p>
</li>
</ul>
<blockquote>
<p>→ If <code>onDetachedFromRecyclerView</code> is not called, which is equivalent to the fact that <code>unregisterAdapterDataObserver</code> will not be called, an instance of <code>RecyclerViewDataObserver</code> will stay alive inside your <code>Adapter</code> as long as that <code>Adapter</code> is alive. <code>RecyclerViewDataObserver</code>, in turn, holds a reference to its enclosing <code>RecyclerView</code>, which in turn holds a reference to its enclosing <code>Context</code>. In this case, it is your <code>Activity</code> or <code>Fragment</code>‘s host <code>Context</code> (which is 99% an <code>Activity</code>). So your <code>Activity</code> will be held there for quite a long time, longer than you may expect.</p>
</blockquote>
<h1 id="2-The-Solution"><a href="#2-The-Solution" class="headerlink" title="2. The Solution"></a>2. The Solution</h1><p>As we have discussed quite long about the Problem, let’s see how we can solve it. Since the solution is quite obvious, I would like you to not leave here right now and maybe continue reading to the next paragraph: more motivations for you to always use this solution.</p>
<p>So the solution is:</p>
<ul>
<li><p>In short: remove your Adapter from the RecyclerView as soon as your RecyclerView is going to leave. Which is equivalent to calling: <code>recyclerView.setAdapter(null)</code>.</p>
</li>
<li><p>Why this solve the problem? - by calling <code>setAdapter</code> with whatever value the Adapter is (as long as it is different to current Adapter), your RecyclerView will always detach current Adapter, which means that <code>Adapter#onDetachedFromRecyclerView</code> and <code>Adapter#unregisterAdapterDataObserver</code> will properly be called. Using a null Adapter will stop the works there. That is!</p>
</li>
</ul>
<h1 id="3-One-more-thing"><a href="#3-One-more-thing" class="headerlink" title="3. One more thing."></a>3. One more thing.</h1><p>You may say <strong><em>well, it is not bad, but I’m not convinced yet…</em></strong>, let’s keep going a bit further.<br>There is another couple I have discussed above: <code>Adapter#onViewAttachedToWindow</code> and <code>Adapter#onViewDetachedFromWindow</code>. Let see 2 (plus 1) screenshots below to see what is the difference between calling <code>setAdapter</code> to null and not calling it.</p>
<p>Note: my experiment is to setup an Activity with a RecyclerView, and by pressing “Current App Stack” button I can easily make the Activity destroy/recreated. I debug on <code>RecyclerView#onChildAttachedToWindow</code> and <code>RecyclerView#onChildDetachedFromWindow</code> which is called along with those 2 methods above, respectively.</p>
<ul>
<li>Screenshot 0: after clicking to “App Stack” button, your Activity is destroyed, and by clicking to its “Snapshot” in the stack, you bring it back to life with a “recreation” (savedInstanceState is not null).</li>
</ul>
<img src="/2017/06/03/Why-you-should-call-setAdapter-null/activity-recreated.png" alt="Screenshot 0: Activity is re-created" title="Screenshot 0: Activity is re-created">
<ul>
<li>Screenshot 1: not calling setAdapter to null in onDestroy</li>
</ul>
<img src="/2017/06/03/Why-you-should-call-setAdapter-null/destroy-do-nothing.png" alt="Screenshot 1: not calling setAdapter to null in onDestroy" title="Screenshot 1: not calling setAdapter to null in onDestroy">
<ul>
<li>Screenshot 2: calling setAdapter to null in onDestroy</li>
</ul>
<img src="/2017/06/03/Why-you-should-call-setAdapter-null/destroy-remove-adapter.png" alt="Screenshot 2: calling setAdapter to null in onDestroy" title="Screenshot 2: calling setAdapter to null in onDestroy">
<p>You see the difference? </p>
<ol>
<li><p>With proper call to remove the Adapter, current Views on RecyclerView are also properly detached from Window. Otherwise, your Views will not be detached, and I cannot tell where they will be after your Activity is destroyed (or maybe it will not…).</p>
</li>
<li><p>If you ignore the fact, let see further: the attached Views after your Activity is recreated are all different (see their hashCode in my Screenshot), which means that those older Views is going somewhere else, without a proper “detaching” from the old Window. Where are they? I have no idea.</p>
</li>
<li><p>Well, I maybe a bit OCD, but not seeing any “onChildDetachedFromWindow” while there is a whole bunch of “onChildAttachedToWindow” make me feel bad. Hope it is not only me out there.</p>
</li>
</ol>
<p>That’s all. Happy Coding!</p>
]]></content>
    
    <summary type="html">
    
      TL;DR Always call RecyclerView#setAdapter(null) before your RecyclerView is going away (in onDestroy/onDestroyView/...).
    
    </summary>
    
    
      <category term="EN" scheme="https://eneim.github.io/tags/EN/"/>
    
      <category term="Dev" scheme="https://eneim.github.io/tags/Dev/"/>
    
      <category term="Android" scheme="https://eneim.github.io/tags/Android/"/>
    
      <category term="RecyclerView" scheme="https://eneim.github.io/tags/RecyclerView/"/>
    
      <category term="Adapter" scheme="https://eneim.github.io/tags/Adapter/"/>
    
      <category term="Beginner" scheme="https://eneim.github.io/tags/Beginner/"/>
    
  </entry>
  
  <entry>
    <title>The future of Toro in relationship with ExoPlayer</title>
    <link href="https://eneim.github.io/2017/04/27/The-future-of-Toro-in-relationship-with-ExoPlayer/"/>
    <id>https://eneim.github.io/2017/04/27/The-future-of-Toro-in-relationship-with-ExoPlayer/</id>
    <published>2017-04-26T23:24:42.000Z</published>
    <updated>2017-05-12T08:34:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>I have been developed an Android library named <strong>Toro</strong>. TL;DR it is <a href="https://github.com/eneim/Toro" target="_blank" rel="external">here</a>.</p>
<h1 id="About-Toro"><a href="#About-Toro" class="headerlink" title="About Toro"></a>About Toro</h1><p>Description about this library can be found in that github repo. But in short, Toro supports the behavior of Media Playlist on RecyclerView, including auto playback and state managing (pause/resume etc). The motivation behind this comes from Facebook timeline, Instagram, etc.</p>
<h1 id="About-ExoPlayer"><a href="#About-ExoPlayer" class="headerlink" title="About ExoPlayer"></a>About ExoPlayer</h1><p><em>From ExoPlayer’s README</em></p>
<blockquote>
<p>ExoPlayer is an application level media player for Android. It provides an alternative to Android’s MediaPlayer API for playing audio and video both locally and over the Internet. ExoPlayer supports features not currently supported by Android’s MediaPlayer API, including DASH and SmoothStreaming adaptive playbacks. Unlike the MediaPlayer API, ExoPlayer is easy to customize and extend, and can be updated through Play Store application updates.</p>
</blockquote>
<p>Latest version of Toro are built on top of ExoPlayer 2 (and other Media playback platforms, but ExoPlayer 2 is mostly focused). More about ExoPlayer can be found <a href="https://github.com/google/ExoPlayer" target="_blank" rel="external">here</a> and <a href="https://medium.com/google-exoplayer" target="_blank" rel="external">here</a>.</p>
<h1 id="What-I’m-talking-about"><a href="#What-I’m-talking-about" class="headerlink" title="What I’m talking about?"></a>What I’m talking about?</h1><p>In development history of Toro, it went from supporting every Media playback platform as possible to focusing on ExoPlayer 2. It provides a common interface for playback, then it provides extensions that implement the interfaces on top of the Media playback platform. Right now you can see those extensions in the github repo. Currently Toro supports Android’s default MediaPlayer APIs, ExoPlayer 1 and ExoPlayer 2.</p>
<p>Since ExoPlayer 2 is now preferred over ExoPlayer 1, and Android’s MediaPlayer API is hard to use as well as maintain (which is also one of the motivation of ExoPlayer), and I’m the only active contributor of Toro, there is a need to consider the future path of the library.</p>
<p>In short, I love Media playback, so I’m not ending my library. But spending time to support all possible Platforms is impossible. Instead, I will push my focus to ExoPlayer 2+ from now on (in fact, I will keep support ExoPlayer 2 as long as it is under active development. Even after that, I will keep supporting the latest stable release for a reasonable duration). Furthermore, Toro comes with a pretty well modularization structure, and developing extensions are really straight-forward, I believe that supporting other platform are just the problem of time and human resources. So anyone in favor can take that part and contribute.</p>
]]></content>
    
    <summary type="html">
    
      ... I&#39;m not ending my library. But spending time to support all possible Platforms is impossible.
    
    </summary>
    
    
      <category term="EN" scheme="https://eneim.github.io/tags/EN/"/>
    
      <category term="Dev" scheme="https://eneim.github.io/tags/Dev/"/>
    
      <category term="Android" scheme="https://eneim.github.io/tags/Android/"/>
    
      <category term="Toro" scheme="https://eneim.github.io/tags/Toro/"/>
    
      <category term="ExoPlayer" scheme="https://eneim.github.io/tags/ExoPlayer/"/>
    
  </entry>
  
  <entry>
    <title>Bye bye CI</title>
    <link href="https://eneim.github.io/2017/02/12/Bye-bye-CI/"/>
    <id>https://eneim.github.io/2017/02/12/Bye-bye-CI/</id>
    <published>2017-02-11T15:57:52.000Z</published>
    <updated>2017-05-12T07:01:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Why"><a href="#Why" class="headerlink" title="Why ?"></a>Why ?</h1><p><strong>TL,DR</strong>:</p>
<blockquote>
<p>Why CI?</p>
</blockquote>
<p>Publishing made easy.</p>
<blockquote>
<p>Why <strong><em>not</em></strong> CI?</p>
</blockquote>
<p>CI setting is complicated.</p>
<h1 id="Long-story-short"><a href="#Long-story-short" class="headerlink" title="Long story short"></a>Long story short</h1><p>I have been struggling setting up my new Wercker CI (to support private repo) for a day. It fails with some un-expected behaviour I could not explain. The same setup works well for local … I suspect the docker image CI is running in doesn’t perfectly support hexo. So I stop using CI, just manually type the deploy script on every new post.</p>
<p>  That’s it.</p>
]]></content>
    
    <summary type="html">
    
      I have been struggling setting up my new Wercker CI (to support private repo) ...
    
    </summary>
    
    
      <category term="EN" scheme="https://eneim.github.io/tags/EN/"/>
    
      <category term="Dev" scheme="https://eneim.github.io/tags/Dev/"/>
    
      <category term="CI" scheme="https://eneim.github.io/tags/CI/"/>
    
  </entry>
  
  <entry>
    <title>Migrate to wercker</title>
    <link href="https://eneim.github.io/2017/02/11/Migrate-to-wercker/"/>
    <id>https://eneim.github.io/2017/02/11/Migrate-to-wercker/</id>
    <published>2017-02-11T04:12:13.000Z</published>
    <updated>2017-05-12T07:01:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Prefect"><a href="#Prefect" class="headerlink" title="Prefect"></a>Prefect</h1><p>So it has been a while I have no activity on my blog. It is of course a predictable behaviour. These days, I still am wandering around, with not much to think about.</p>
<h1 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h1><p>Lately, there are some changes in either my private life as well as my professional activities. I would like to make my writing better, but still try to keep it staying underground before it is the time to publish it.</p>
<p>So I decide to move from travis to something allows me to use private github repo. And here wercker comes.</p>
<h1 id="What-I-did"><a href="#What-I-did" class="headerlink" title="What I did?"></a>What I did?</h1><p>Create a new private repo, copy-paste my old blog repo into this new one, re-write CI script (see werkcer.yml for more information). Finally I write this post and then push it to master.</p>
<h1 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h1><p>Let’s see if this post can be successfully deployed …</p>
]]></content>
    
    <summary type="html">
    
      Lately, there are some changes in either my private life as well as my professional activities. I would like to make my writing better, but still try to keep it staying underground before it is the time to publish it. So I decide to move from travis to something allows me to use private github repo. And here wercker comes.
    
    </summary>
    
    
      <category term="EN" scheme="https://eneim.github.io/tags/EN/"/>
    
      <category term="Dev" scheme="https://eneim.github.io/tags/Dev/"/>
    
      <category term="CI" scheme="https://eneim.github.io/tags/CI/"/>
    
      <category term="Migrate" scheme="https://eneim.github.io/tags/Migrate/"/>
    
  </entry>
  
  <entry>
    <title>Auto deploy from Travis CI</title>
    <link href="https://eneim.github.io/2016/08/07/Deploy-from-travis/"/>
    <id>https://eneim.github.io/2016/08/07/Deploy-from-travis/</id>
    <published>2016-08-07T11:42:46.000Z</published>
    <updated>2017-03-11T16:03:56.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>TL,DR:</strong> I added my blog to Travis CI so every time I push something new to <em>master branch</em> of my blog repo, it will automatically generate and deploy my blog.</p>
<h2 id="Why-CI-Why"><a href="#Why-CI-Why" class="headerlink" title="Why CI, Why?"></a>Why CI, Why?</h2><blockquote>
<p><strong><em>Why not?</em></strong></p>
</blockquote>
<p>Well, this morning when I was in the train going far away from home (to the next station, actually), I would like to post something fun to my new blog. But hey, I don’t have my PC connected to the Internet, and if I really want to, I need to tether from my iPhone, which is not something cool. So I thought of how about something that help me to deploy the post after I push it to the repo. So that I can simply post new stuff just from my iPhone.</p>
<p>Well (again), it turns out to be easily done by setting up a CI (Continuous Integration) server, where <strong>Travis CI</strong> is one of the most famous. And most important, when I tried a <em>Google search</em> about it, <a href="https://sazzer.github.io/blog/2015/05/04/Deploying-Hexo-to-Github-Pages-with-Travis/" target="_blank" rel="external">this tutorial</a> comes to (almost) top. So here I have my blog setup, and after I push this post to the air, I don’t have to run the boring <code>hexo deploy</code> command again.</p>
<p>Just that. Have fun blogging folks.</p>
<p><em>P/S</em>: This post is actually created to test the CI.</p>
]]></content>
    
    <summary type="html">
    
      I added my blog to Travis CI so every time I push something new to *master branch* of my blog repo, it will automatically generate and deploy my blog.
    
    </summary>
    
    
      <category term="Blog" scheme="https://eneim.github.io/tags/Blog/"/>
    
      <category term="EN" scheme="https://eneim.github.io/tags/EN/"/>
    
      <category term="Dev" scheme="https://eneim.github.io/tags/Dev/"/>
    
      <category term="CI" scheme="https://eneim.github.io/tags/CI/"/>
    
      <category term="Travis" scheme="https://eneim.github.io/tags/Travis/"/>
    
  </entry>
  
  <entry>
    <title>To the Multi lang blog - English, 日本語, Tiếng Việt</title>
    <link href="https://eneim.github.io/2016/08/07/To-the-Multilang/"/>
    <id>https://eneim.github.io/2016/08/07/To-the-Multilang/</id>
    <published>2016-08-07T01:16:07.000Z</published>
    <updated>2017-03-11T16:02:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="A-multi-languages-blog"><a href="#A-multi-languages-blog" class="headerlink" title="A multi languages blog"></a>A multi languages blog</h2><p>As a foreigner engineer living in Japan, working with multi-platform services and open projects with other engineers all over the World, supporting multi languages is a must-have feature I would like to add to my blog.</p>
<p>The setup is just simple: one line of CSS, some tune-up in font family styling and you are <del>done</del> almost there.</p>
<p>There is one single issue which I encounter many time: does the new typeface look good everywhere, for my languages? Currently, I’m using English, Japanese and Vietnamese almost equally among them. So both of them should be nicely rendered.</p>
<p>As a general mobile developer, I have no favorite font family. My very basic setup will be <strong>Roboto</strong> or <strong>Noto</strong>. This blog is current using something I haven’t test yet, but if it works fine, I will leave it there.</p>
<p>Now there would be some non-English paragraph to test <del>foreign languages</del> some other languages.</p>
<h2 id="A-Japanese-Lorem-Ipsum"><a href="#A-Japanese-Lorem-Ipsum" class="headerlink" title="A Japanese Lorem Ipsum"></a>A Japanese Lorem Ipsum</h2><p>用モニシ市社みねスけ鎖絵アラ費分マク由男4校タア系際ドルゆ料方結美るきラ想転治チマ期相ちイあ者亜ま。同タケ主共クう整3独べまい市画キフミ告稿チ表関ラ政89無ぞし募示ヱクサ権用ルざ十歌みト握68演せさ既新ぎ琶名ンょ問発監す。動信出リどえて定杯レモ当79打ドクる記組ク責明ドば側意ス位牟クヱマ条着レヱ能強な告陸済蘭注ツ線物のぽべた転催野川列ばな。</p>
<p>無ルおねト照徳54玉うフ東質レイヤミ討告ゃン討一ヱフエソ番未チヱヌ帰物ム援宇すょレゆ認被ネヱ取展ぼど見行働迎彫慰て。投ぞじぶど州中とめ松広サシワ新十ゃリげゅ三属ヲタコ簡山ぞろゅ話満ぜる申望4帰ロナタ引受び込松正みすぽ松統お作祭ツ供担作フお検海詳暮点ろ。表外ヨ反辞タ城理さぐに替王ネ更増ユ業71界藤ッぽ年3軽内えス排視ヒトウ首村トホツ算禁在ざ制決次修級ぽゃぞも。</p>
<p>午相カネムサ業向シウロク転予れづり問営ハエラモ代強ラ内分リづ囲必リオ博辞でっ品安変ケ気言えッたと本航レオセ転論ドえ増口コヒセ擬5表労ヒトアレ広画てねーひ連汚ッずつこ。報カ旅応ムハリ事消証ん官堅れくラ月車だゅまど以4分べおむ一在ひちゅい心辞クぜもぱ釜所ト響併室だわ力42千つづほへ日天ふフらり多68箱僕滞よさむて。</p>
<h2 id="A-Vietnamese-Lorem-Ipsum"><a href="#A-Vietnamese-Lorem-Ipsum" class="headerlink" title="A Vietnamese Lorem Ipsum"></a>A Vietnamese Lorem Ipsum</h2><p>Lorem Ipsum chỉ đơn giản là một đoạn văn bản giả, được dùng vào việc trình bày và dàn trang phục vụ cho in ấn. Lorem Ipsum đã được sử dụng như một văn bản chuẩn cho ngành công nghiệp in ấn từ những năm 1500, khi một họa sĩ vô danh ghép nhiều đoạn văn bản với nhau để tạo thành một bản mẫu văn bản. Đoạn văn bản này không những đã tồn tại năm thế kỉ, mà khi được áp dụng vào tin học văn phòng, nội dung của nó vẫn không hề bị thay đổi. Nó đã được phổ biến trong những năm 1960 nhờ việc bán những bản giấy Letraset in những đoạn Lorem Ipsum, và gần đây hơn, được sử dụng trong các ứng dụng dàn trang, như Aldus PageMaker.</p>
<p>Trái với quan điểm chung của số đông, Lorem Ipsum không phải chỉ là một đoạn văn bản ngẫu nhiên. Người ta tìm thấy nguồn gốc của nó từ những tác phẩm văn học la-tinh cổ điển xuất hiện từ năm 45 trước Công Nguyên, nghĩa là nó đã có khoảng hơn 2000 tuổi. Một giáo sư của trường Hampden-Sydney College (bang Virginia - Mỹ) quan tâm tới một trong những từ la-tinh khó hiểu nhất, “consectetur”, trích từ một đoạn của Lorem Ipsum, và đã nghiên cứu tất cả các ứng dụng của từ này trong văn học cổ điển, để từ đó tìm ra nguồn gốc không thể chối cãi của Lorem Ipsum. Thật ra, nó được tìm thấy trong các đoạn 1.10.32 và 1.10.33 của “De Finibus Bonorum et Malorum” (Đỉnh tối thượng của Cái Tốt và Cái Xấu) viết bởi Cicero vào năm 45 trước Công Nguyên. Cuốn sách này là một luận thuyết đạo lí rất phổ biến trong thời kì Phục Hưng. Dòng đầu tiên của Lorem Ipsum, “Lorem ipsum dolor sit amet…” được trích từ một câu trong đoạn thứ 1.10.32.</p>
<p>Trích đoạn chuẩn của Lorem Ipsum được sử dụng từ thế kỉ thứ 16 và được tái bản sau đó cho những người quan tâm đến nó. Đoạn 1.10.32 và 1.10.33 trong cuốn “De Finibus Bonorum et Malorum” của Cicero cũng được tái bản lại theo đúng cấu trúc gốc, kèm theo phiên bản tiếng Anh được dịch bởi H. Rackham vào năm 1914.</p>
<h2 id="Last-but-not-least-Programming-languages"><a href="#Last-but-not-least-Programming-languages" class="headerlink" title="Last but not least: Programming languages"></a>Last but not least: Programming languages</h2><p>Talking to languages, with an engineer, there should not be forgotten about Programming languages. I would like to have beautiful code block for some of my most familiar Programming languages. Let’s try some.</p>
<h4 id="1-Java"><a href="#1-Java" class="headerlink" title="1. Java"></a>1. Java</h4><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.app;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.app.Application;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line">        AndroidThreeTen.init(<span class="keyword">this</span>); <span class="comment">// init the lib here</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-XML"><a href="#2-XML" class="headerlink" title="2. XML"></a>2. XML</h4><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="comment">&lt;!--</span></div><div class="line">  Copyright 2016 Google Inc.</div><div class="line"></div><div class="line">  Licensed under the Apache License, Version 2.0 (the "License");</div><div class="line">  you may not use this file except in compliance with the License.</div><div class="line">  You may obtain a copy of the License at</div><div class="line"></div><div class="line">       http://www.apache.org/licenses/LICENSE-2.0</div><div class="line"></div><div class="line">  Unless required by applicable law or agreed to in writing, software</div><div class="line">  distributed under the License is distributed on an "AS IS" BASIS,</div><div class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</div><div class="line">  See the License for the specific language governing permissions and</div><div class="line">  limitations under the License.</div><div class="line">  --&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">vector</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">android:width</span>=<span class="string">"360dp"</span></div><div class="line">    <span class="attr">android:height</span>=<span class="string">"200dp"</span></div><div class="line">    <span class="attr">android:viewportWidth</span>=<span class="string">"360"</span></div><div class="line">    <span class="attr">android:viewportHeight</span>=<span class="string">"200"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">path</span></span></div><div class="line">        <span class="attr">android:name</span>=<span class="string">"hash"</span></div><div class="line">        <span class="attr">android:pathData</span>=<span class="string">"M39,45L39,80 M57,45L57,80 M66,54L31,54 M66,71L31,71"</span></div><div class="line">        <span class="attr">android:strokeColor</span>=<span class="string">"@color/indigo_400"</span></div><div class="line">        <span class="attr">android:strokeLineCap</span>=<span class="string">"round"</span></div><div class="line">        <span class="attr">android:strokeWidth</span>=<span class="string">"@dimen/hashtag_stroke_width"</span> /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">path</span></span></div><div class="line">        <span class="attr">android:name</span>=<span class="string">"i_body"</span></div><div class="line">        <span class="attr">android:pathData</span>=<span class="string">"M83,82L107,82A2,2 0,0 1,109 84L109,155A2,2 0,0 1,107 157L83,157A2,2 0,0 1,81 155L81,84A2,2 0,0 1,83 82z"</span></div><div class="line">        <span class="attr">android:strokeColor</span>=<span class="string">"@color/indigo_400"</span></div><div class="line">        <span class="attr">android:strokeWidth</span>=<span class="string">"@dimen/hashtag_stroke_width"</span> /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">path</span></span></div><div class="line">        <span class="attr">android:name</span>=<span class="string">"i_dot"</span></div><div class="line">        <span class="attr">android:pathData</span>=<span class="string">"M94,59m-14,0a14,14 0,1 1,28 0a14,14 0,1 1,-28 0"</span></div><div class="line">        <span class="attr">android:strokeColor</span>=<span class="string">"@color/indigo_400"</span></div><div class="line">        <span class="attr">android:strokeWidth</span>=<span class="string">"@dimen/hashtag_stroke_width"</span> /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">path</span></span></div><div class="line">        <span class="attr">android:name</span>=<span class="string">"o"</span></div><div class="line">        <span class="attr">android:pathData</span>=<span class="string">"M159.5,119.5m-37.5,0a37.5,37.5 0,1 1,75 0a37.5,37.5 0,1 1,-75 0"</span></div><div class="line">        <span class="attr">android:strokeColor</span>=<span class="string">"@color/indigo_400"</span></div><div class="line">        <span class="attr">android:strokeWidth</span>=<span class="string">"@dimen/hashtag_stroke_width"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">vector</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="3-Javascript"><a href="#3-Javascript" class="headerlink" title="3. Javascript"></a>3. Javascript</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"></div><div class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  res.send(<span class="string">'Hello World!'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Example app listening on port 3000!'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="4-Gist"><a href="#4-Gist" class="headerlink" title="4. Gist"></a>4. Gist</h4><script src="//gist.github.com/55df01e092520a6d33a4.js?file=BadgeTabLayout.java"></script>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Well, let’s be multi-lang.</p>
]]></content>
    
    <summary type="html">
    
      As a foreigner engineer living in Japan, working with multi-platform services and open projects with other engineers all over the World, supporting multi languages is a must-have feature I would like to add to my blog.
    
    </summary>
    
    
      <category term="Blog" scheme="https://eneim.github.io/tags/Blog/"/>
    
      <category term="EN" scheme="https://eneim.github.io/tags/EN/"/>
    
      <category term="JP" scheme="https://eneim.github.io/tags/JP/"/>
    
      <category term="VI" scheme="https://eneim.github.io/tags/VI/"/>
    
  </entry>
  
  <entry>
    <title>A New Challenge</title>
    <link href="https://eneim.github.io/2016/08/06/new-challenge/"/>
    <id>https://eneim.github.io/2016/08/06/new-challenge/</id>
    <published>2016-08-05T16:44:24.000Z</published>
    <updated>2017-03-11T16:03:39.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="New-Challenge"><a href="#New-Challenge" class="headerlink" title="New Challenge"></a>New Challenge</h2><p>So it has been couple days since I moved on. I wanted to have/create my own tech/stuff blog for quite a long time, and in many times actually. But neither my schedule allowed me to do that, nor I myself had enough enthusiastic to do that.</p>
<p>But then, I move on, and at the time I’m <del>writing</del> typing this post, I turned 27. I have never considered a single day to be more special than others, including my own birthday. But of course, it is still something that Facebook notifies me when the time comes. So I decide to make a TODO list.</p>
<p>And the first item comes to my mind, is to have a <em>not-bad-done</em> blog, which should be a log catching my thought everyday and saving my process for times.</p>
<p>So here it is, after all this time.</p>
<p><strong>Hello World!</strong> one more time.</p>
]]></content>
    
    <summary type="html">
    
      Hello World one more time.
    
    </summary>
    
    
      <category term="Blog" scheme="https://eneim.github.io/tags/Blog/"/>
    
      <category term="EN" scheme="https://eneim.github.io/tags/EN/"/>
    
  </entry>
  
</feed>
