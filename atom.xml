<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>eneim&#39;s log</title>
  <icon>https://www.gravatar.com/avatar/f8ca3e94570e4dc117f34563687a3b09</icon>
  <subtitle>the simple, the best</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ene.im/"/>
  <updated>2019-02-10T14:44:13.620Z</updated>
  <id>https://ene.im/</id>
  
  <author>
    <name>Nam Nguyen</name>
    <email>nam@ene.im</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>One more thing from Droidkaigi 2019</title>
    <link href="https://ene.im/2019/02/10/droidkaigi-2019-part-4/"/>
    <id>https://ene.im/2019/02/10/droidkaigi-2019-part-4/</id>
    <published>2019-02-10T14:44:13.000Z</published>
    <updated>2019-02-10T14:44:13.620Z</updated>
    
    <content type="html"><![CDATA[<p>If you have gone though my note about attending DroidKaigi 2019 <a href="/2019/02/10/droidkaigi-2019-part-1/">part 1</a>, <a href="/2019/02/10/droidkaigi-2019-part-2/">part 2</a>, <a href="/2019/02/10/droidkaigi-2019-part-3/">part 3</a>, I hope you will be excited about <strong>Kohii</strong> and curious about how to use it in practice.</p><p><a href="https://github.com/eneim/kohii" target="_blank" rel="noopener"><strong>Kohii</strong></a> is still designing phase, and not ready for production yet. At the moment I’m typing these lines, I already have a (kind of) new mechanism that allow client to further customize Kohii’s behavior, as well as reduce its burden which in turn improve its performance.</p><p>In this post, I would like to show how to build the following App using current <a href="https://github.com/eneim/kohii/blob/dev-v1/README.md" target="_blank" rel="noopener">release alpha04</a> of <strong>Kohii</strong>:</p><img src="/2019/02/10/droidkaigi-2019-part-4/kohii_part4_1.gif"><p>First, let I sketch out our target in this post:</p><ul><li><p>Implement ExoPlayer in a RecyclerView. Video item should start and pause playback automatically when user scrolls the list.</p></li><li><p>When user clicks to a Video item, it will open a fullscreen overlay single player. The playback should keep playing without any discontinuity.</p></li><li><p>The overlay player can be transformed to the mini form once User drag it down.</p></li><li><p>Pressing <em>Back</em> button will also transform the overlay player, if it presents, or will close the App otherwise.</p></li></ul><p>This post use <strong>Android Studio 3.4 Beta 02</strong>. Before starting, please make sure</p><ul><li>You own the content you use in the project, or at least you have enough right to use.</li></ul><h2 id="0-Start-new-project-with-necessary-dependencies"><a href="#0-Start-new-project-with-necessary-dependencies" class="headerlink" title="0. Start new project with necessary dependencies"></a>0. Start new project with necessary dependencies</h2><p>First steps would be to start new project using Android Studio. <a href="https://github.com/eneim/KohiiDemo/tree/demo/step0" target="_blank" rel="noopener">I would like to go through this step</a>.</p><h2 id="1-Update-necessary-dependencies"><a href="#1-Update-necessary-dependencies" class="headerlink" title="1. Update necessary dependencies"></a>1. Update necessary dependencies</h2><p>After finishing step 0, please add these lines below to build.gradle:</p><figure class="highlight gradle"><figcaption><span>build.gradle</span></figcaption><div style="overflow:auto"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app module's build.gradle</span></span><br><span class="line">implementation <span class="string">'androidx.constraintlayout:constraintlayout:2.0.0-alpha3'</span></span><br><span class="line"></span><br><span class="line">implementation <span class="string">"androidx.coordinatorlayout:coordinatorlayout:1.1.0-alpha01"</span></span><br><span class="line">implementation <span class="string">"androidx.recyclerview:recyclerview:1.1.0-alpha02"</span></span><br><span class="line">implementation <span class="string">"androidx.recyclerview:recyclerview-selection:1.1.0-alpha01"</span></span><br><span class="line">implementation <span class="string">"androidx.lifecycle:lifecycle-extensions:2.1.0-alpha02"</span></span><br><span class="line">implementation <span class="string">"com.google.android.material:material:1.1.0-alpha03"</span></span><br><span class="line"></span><br><span class="line">implementation <span class="string">"im.ene.kohii:kohii:1.0.0.2904-ALPHA04"</span></span><br><span class="line">implementation <span class="string">"com.google.android.exoplayer:exoplayer:2.9.4"</span></span><br></pre></td></tr></table></div></figure><p>See this <a href="https://github.com/eneim/KohiiDemo/compare/demo/step0...demo/step1?expand=1" target="_blank" rel="noopener">diff</a> for detail.</p><p>We will use <code>BottomSheetBehavior</code> with <code>MotionLayout</code> to create the <em>overlay player pane</em>.</p><h2 id="2-Preparing-base-UI-1"><a href="#2-Preparing-base-UI-1" class="headerlink" title="2. Preparing base UI (1)"></a>2. Preparing base UI (1)</h2><p>In this step, we put simple implementation for our list. Take a look at this <a href="https://github.com/eneim/KohiiDemo/compare/demo/step1...demo/step2" target="_blank" rel="noopener">diff</a> to see what has changed. And below is how this app looks right now:</p><img src="/2019/02/10/droidkaigi-2019-part-4/kohii_demo_2.gif" class="smallimg" width="256" height="480"><p>To summarize: we add the option to compile in Java 8 as ExoPlayer’s requirement. Next we add a simple ViewHolder whose contains only an ExoPlayer and a TextView. We will use this in our demo.</p><h2 id="3-Adding-Kohii-to-the-App"><a href="#3-Adding-Kohii-to-the-App" class="headerlink" title="3. Adding Kohii to the App"></a>3. Adding Kohii to the App</h2><p>In this step, we will add actual Video content in to the list, and use Kohii to make ExoPlayer works with our video list.</p><p>See this <a href="https://github.com/eneim/KohiiDemo/compare/demo/step2...demo/step3?expand=1" target="_blank" rel="noopener">diff</a> for detail about what has changed.</p><p>In this step, we first add the permission to use INTERNET because our App will load Video from it. In this demo, we will use <em>Big Buck Bunny</em> because it is open and free for non-commercial use, which is great.</p><p>In this step, we simply adding Kohii to the adapter, and then use it to build <strong>Playable</strong> and pass it down to ViewHolder. It is enough to gain the automatic play/pause behavior in our App, as below:</p><img src="/2019/02/10/droidkaigi-2019-part-4/kohii_demo_3.gif" class="smallimg" width="256" height="480"><h2 id="4-Adding-selection-configuration"><a href="#4-Adding-selection-configuration" class="headerlink" title="4. Adding selection configuration"></a>4. Adding selection configuration</h2><p>From now, we add more complicated behavior to the list, including listening to click event to the PlayerView and connect it to the SelectionTracker.</p><p>See this <a href="https://github.com/eneim/KohiiDemo/compare/demo/step3...demo/step4?expand=1" target="_blank" rel="noopener">diff</a> for detail about what has changed.</p><p>To summarize (we have a lot to summarize in this step):</p><ul><li><p>We need to create a SelectionTracker that accepts only <strong>single selection</strong> using <code>SelectionPredicates.createSelectSingleAnything()</code>.</p></li><li><p>This SelectionTracker will be passed down to Adapter. Here in the Adapter, when we create new VideoViewHolder, we also bind a click listener to the PlayerView container only. Once clicked, we will dispatch the selection to SelectionTracker.</p></li><li><p>We also need a <code>VideoTagKeyProvider</code> (extends <code>ItemKeyProvider</code>) and a <code>VideoItemLookup</code> (extends <code>ItemDetailsLookup</code>).</p></li><li><p>Finally, to combine everything to get the current progess below:</p></li></ul><img src="/2019/02/10/droidkaigi-2019-part-4/kohii_demo_4.gif" class="smallimg" width="256" height="480"><h2 id="5-Adding-the-View-for-our-overlay-player"><a href="#5-Adding-the-View-for-our-overlay-player" class="headerlink" title="5. Adding the View for our overlay player"></a>5. Adding the View for our overlay player</h2><p>This is the most complicated step. In this step, we will adding the overlay player using BottomSheetBehavior and MotionLayout.</p><p>See this <a href="https://github.com/eneim/KohiiDemo/compare/demo/step4...demo/step5?expand=1" target="_blank" rel="noopener">diff</a> to see what has changed.</p><p>Before going into the explaination, let see how our App becomes now:</p><img src="/2019/02/10/droidkaigi-2019-part-4/kohii_demo_5.gif" class="smallimg" width="256" height="480"><p>First, we need to prepare the MotionLayout that contains the layout of Single Player (the target layout when User click to a Video). Next, we need to give that MotionLayout a layoutDescription, which describe the MotionScene by which we transform the fullscreen layout to the mini overlay layout.</p><p>This MotionLayout will be contained inside a FrameLayout that has the BottomSheetBehavior.</p><p>We may not need to do this, but there is an issue I will describe below that I need to wrap the MotionLayout by a BottomSheetBehavior: Consider the scenarior when User click to a Video (which will open the fullscreen single player), and then drag it down to the mini player. Here, user open multi-windows mode. With correct instance state saving and restoring, we would expect it to keep being the mini player after the recreation. If we only use MotionLayout, we need to handle this state saving/restoring manually, and from my experience, it is quite painful. As said, it is doable, but it will be out of the scope of this post. Readers of this post are free to try. I would make further update if the task is actually trivial.</p><p>What we need to do next is to connect the selection with BottomSheet expanding/collapsing and MotionLayout transforming:</p><ul><li><p>Once a ViewHolder is selected, we expand the BottomSheet and update our PlayerView in the overlay layout with the <strong>Playable</strong> of that ViewHolder. We also need to clear the <strong>Playable</strong> of that ViewHolder, or else it will be played instead of our overlay PlayerView.</p></li><li><p>The MotionLayout will listen to BottmSheet’s sliding progress and update its progress accordingly.</p></li><li><p>The BottomSheet will be the one to consume the drag event, and MotionLayout will again listen to its sliding progress an transform to the mini form.</p></li></ul><p>One thing must be explain here is the custom <code>KohiiDemoBottomSheetBehavior</code>. By default, once the BottomSheet is at its expanded state, it will not intercept the touch event. This allow the View underneath to be touched. In our App, touching through BottomSheet while it is expanded will trigger a selection on RecyclerView, which is bad. To fix this, I extend the default BottomSheetBehavior and allow it to intercept the touch event when it is expanded.</p><p><strong>Please note that, this is only for demonstration purpose. In production, you will need proper implementation. This should depend on your logic and requirement, and it is out of the scope of this post. I will keep looking for a better implementation as well.</strong></p><p>Last but not least, you may notice the <code>SelectionViewModel</code> class. This is a technique i use to get back the selection state after a configuration change. So instead of having the setup for expanding the overlay player in 2 places (one in the selection observer callback, and one for the case we are back from a recreation, then we need to check the selection state, and then if/else hell to decide if we need to expand the overlay player or not). Using a ViewModel will help us to put our expanding logic in one logic, and update the selection state is just as simple as updating the ViewModel’s LiveData value.</p><h2 id="6-Finalize"><a href="#6-Finalize" class="headerlink" title="6. Finalize"></a>6. Finalize</h2><p>After this step, our App is almost finish. Only one thing need to taken care: we want that once User clicks the <em>Back button</em>, it would not close the App, but instead:</p><ul><li>If the overlay player is expanded, clicking <em>Back</em> will collapse it to mini form.</li><li>If the overlay player is in mini form, clicking <em>Back</em> will close it.</li><li>If the overlay player is hidden, clicking <em>Back</em> will close the App as usual.</li></ul><p>To make this happen, we simply add the following code in the <code>MainActivity</code></p><figure class="highlight kotlin"><figcaption><span>MainActivity</span></figcaption><div style="overflow:auto"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onBackPressed</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!ignoreBackPress()) <span class="keyword">super</span>.onBackPressed()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">ignoreBackPress</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> overlaySheet?.let &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">when</span> &#123;</span><br><span class="line">      it.state == BottomSheetBehavior.STATE_COLLAPSED -&gt; &#123;</span><br><span class="line">        it.state = BottomSheetBehavior.STATE_HIDDEN</span><br><span class="line">        <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">      it.state == BottomSheetBehavior.STATE_EXPANDED -&gt; &#123;</span><br><span class="line">        it.state = BottomSheetBehavior.STATE_COLLAPSED</span><br><span class="line">        <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> -&gt; <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125; ?: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>This change can be seen in this <a href="https://github.com/eneim/KohiiDemo/compare/demo/step5...demo/step6?expand=1" target="_blank" rel="noopener">diff</a>.</p><p>With this change, our App is finally done. What we do in this post can be found in <a href="https://github.com/eneim/KohiiDemo" target="_blank" rel="noopener">this repository</a>, so feel free to get the source code and play with it yourself.</p><h2 id="7-Final-words"><a href="#7-Final-words" class="headerlink" title="7. Final words"></a>7. Final words</h2><p>So that is. After a long explanation of my approach, this is what you could do with it. I believe this may not be the best approach, but it works, in quite a beautiful way. I will keep working on this and hope it will help a lot of people.</p><p>Hope this post is helpful for you, and please make sure to check out the source code.</p><p>Happy scrolling and dragging!</p><div class="qrcode"><img id="post-qrcode" src="data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='8960' height='8960' viewBox='0 0 35 35'%3e%3cpath d='M1 1h7v7h-7zM9 1h1v1h-1zM13 1h1v1h-1zM15 1h4v2h-1v1h-1v-2h-2zM21 1h1v1h-1zM23 1h3v2h-1v-1h-1v2h2v2h-2v-1h-1v-1h-1v-1h1zM27 1h7v7h-7zM2 2v5h5v-5zM10 2h1v1h1v1h1v1h2v-1h1v4h1v-2h1v2h1v1h2v1h-1v1h-1v-1h-1v-1h-3v-2h-1v2h-1v-3h-1v4h-1v2h-1v-2h-1v1h-1v-1h-1v-1h2v-5h1v1h1v-1h-1zM20 2h1v1h-1zM28 2v5h5v-5zM3 3h3v3h-3zM13 3h2v1h-2zM29 3h3v3h-3zM18 4h2v1h1v-1h1v2h-1v1h-1v1h-1v-3h-1zM10 6v2h1v-2zM21 7h1v1h-1zM23 7h1v1h1v-1h1v2h-1v1h1v1h-1v1h-1v-1h-2v1h1v1h-1v1h-1v-1h-1v1h-1v-1h-1v-1h-1v1h-1v1h-1v1h-1v-2h1v-1h1v-1h-2v-1h4v1h1v1h2v-2h1v-2h1zM1 9h1v1h-1zM5 9h1v1h-1zM23 9v1h1v-1zM26 9h5v1h-2v1h-1v1h-1v1h-1v-2h1v-1h-1zM33 9h1v1h-1zM2 10h2v1h-2zM6 10h1v1h-1zM32 10h1v1h-1zM4 11h1v1h-1zM7 11h1v1h-1zM13 11h1v2h-2v-1h1zM29 11h3v1h-3zM6 12h1v1h-1zM32 12h1v3h-1zM2 13h1v2h-1zM5 13h1v1h-1zM7 13h2v1h-2zM11 13h1v1h-1zM25 13h1v2h-1v1h1v1h2v2h-3v1h1v1h-2v1h-1v-2h1v-1h-3v-2h-2v1h1v2h-1v-1h-2v1h1v2h-3v-1h1v-2h-1v2h-1v-1h-1v-2h3v-1h1v1h1v-2h1v-1h1v-1h1v2h1v-1h2v-1h1zM27 13h1v1h-1zM29 13h1v1h-1zM6 14h1v1h-1zM12 14h1v1h1v1h-1v2h-1zM17 14h2v1h-1v1h-1zM30 14h1v1h-1zM3 15h3v1h-1v1h-1v1h-1v-1h-1v-1h1zM7 15h4v2h-3v-1h-1zM15 15h1v2h-1zM26 15h1v1h-1zM29 15h1v1h-1zM33 15h1v1h-1zM6 16h1v1h1v1h-2v1h-1v-2h1zM23 16v2h2v-1h-1v-1zM28 16h1v1h-1zM30 16h1v2h1v-2h1v1h1v1h-1v2h1v2h-1v-1h-1v-2h-3v-1h1zM1 17h1v1h1v2h1v-1h1v1h1v1h-1v1h-1v-1h-3v-1h1v-1h-1zM7 19h1v1h-1zM11 19h1v1h-1zM28 19h1v1h1v2h-3v-1h1zM8 20h1v1h1v1h-1v1h-1v-1h-2v-1h2zM20 20h1v2h2v1h1v-1h1v2h-2v2h-1v-2h-1v-1h-1v1h-1v2h-1v-1h-2v-1h-2v-1h3v1h1v-1h1v-1h1zM11 21h2v1h1v1h-1v3h2v2h1v1h1v1h-2v2h1v1h1v1h-2v-1h-1v-1h-1v-1h1v-1h-2v-2h-1v-1h-1v1h-1v-4h1v1h1v1h1v-1h-1zM31 21h1v3h-1v2h2v4h1v1h-3v-1h1v-2h-1v2h-2v1h-3v-1h-2v-2h1v-1h-1v-1h1v-1h1v-3h1v1h1v1h-1v1h1v-1h1v-1h2zM1 22h1v1h-1zM3 23h1v1h1v1h3v1h-7v-1h2zM5 23h1v1h-1zM7 23h1v1h-1zM33 23h1v3h-1v-1h-1v-1h1zM20 25h1v1h-1zM16 26h2v1h-1v1h-1zM21 26h1v1h-1zM26 26v3h3v-3zM1 27h7v7h-7zM18 27h1v1h1v1h2v1h-1v2h2v2h-1v-1h-2v-3h-1v-1h-1zM22 27h2v1h-1v1h-1zM27 27h1v1h-1zM2 28v5h5v-5zM10 28h1v1h-1zM13 28v1h1v-1zM3 29h3v3h-3zM9 29h1v1h-1zM17 30h1v2h-1zM22 30h2v1h-2zM10 31h1v1h-1zM24 31h1v1h-1zM30 31h1v3h-4v-1h2v-1h1zM18 32h1v2h-1zM25 32h1v2h-2v-1h1zM33 32h1v2h-2v-1h1zM9 33h5v1h-5z'/%3e%3c/svg%3e" style="width: 128px; height: 128px;"/><p class="notice">Scan the QR code to share this article</p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;If you have gone though my note about attending DroidKaigi 2019 &lt;a href=&quot;/2019/02/10/droidkaigi-2019-part-1/&quot;&gt;part 1&lt;/a&gt;, &lt;a href=&quot;/2019/
      
    
    </summary>
    
    
      <category term="Android" scheme="https://ene.im/tags/android/"/>
    
      <category term="RecyclerView" scheme="https://ene.im/tags/recyclerview/"/>
    
      <category term="ExoPlayer" scheme="https://ene.im/tags/exoplayer/"/>
    
      <category term="2019" scheme="https://ene.im/tags/2019/"/>
    
      <category term="DroidKaigi" scheme="https://ene.im/tags/droidkaigi/"/>
    
  </entry>
  
  <entry>
    <title>Droidkaigi 2019 (part 3)</title>
    <link href="https://ene.im/2019/02/10/droidkaigi-2019-part-3/"/>
    <id>https://ene.im/2019/02/10/droidkaigi-2019-part-3/</id>
    <published>2019-02-10T14:44:08.000Z</published>
    <updated>2019-02-10T14:44:08.642Z</updated>
    
    <content type="html"><![CDATA[<p>In <a href="/2019/02/10/droidkaigi-2019-part-1/">part 1</a> and <a href="/2019/02/10/droidkaigi-2019-part-2/">part 2</a>, I have discussed about how challenging it is to have ExoPlayer work in RecyclerView, and part of my proposal, to solve those challenges. In this part, I would continue with how resource management is implemented in my approach. And with it, how could I build comlicated UX with ease.</p><img src="/2019/02/10/droidkaigi-2019-part-3/kohii_demo_1.gif"><p><em>You may notice some lagging in this gif. This was because Android Studio is not so good in recording screen of Emulator device.</em></p><h2 id="3-Resource-management-amp-More"><a href="#3-Resource-management-amp-More" class="headerlink" title="3. Resource management &amp; More"></a>3. Resource management &amp; More</h2><p>First, let me repeat my principle when designing this approach again:</p><ul><li>Balanced UX and performance<ul><li>2019 devices has more RAM than my Mac</li><li>And more CPU cores too</li><li>UX gain requries Performance loss</li></ul></li><li>Avoid resource reloading as much as possible.<ul><li>No reload on config change</li></ul></li><li>Well lifecycle control does the magic<ul><li>Design lifecycle flow if need</li></ul></li></ul><p>In part 2, my components could easily accomplish the last 2 principles. What remains is <strong>The balance between UX and performance</strong>.</p><p>First, let get back to how <strong>Playback</strong> and <strong>Playable</strong> and <strong>Target</strong> work together:</p><img src="/2019/02/10/droidkaigi-2019-part-3/kohii_part3_1.gif"><p>So all the actual playback will be dispatched to <strong>Playable</strong> once <strong>Playback</strong> receives the signal from <strong>Target</strong> behavior. You can think that: if I implementation actual playback logic in <strong>Playable</strong>, it will finish our approach here, and because <strong>Playable</strong> is created on demand, and kept alive across complicated lifecycle transitions, and will be cleaned up once the <strong>Playback</strong> for it is no longer available (which means that <strong>Playable</strong> is not bound to any <strong>Target</strong>). This way, we ensure that there is no <strong>Playable</strong> lives longer than it should be, and the number of <strong>Playable</strong> available at a time should be less than or equal to the number of <strong>Target</strong> available on the screen (eg: number of PlayerView visible on screen).</p><p>Here I say “less than or equal” because, depending on the implementation, the number of <strong>Playable</strong> will in fact not acceed that of <strong>Target</strong>. On the other hand, an unbound <strong>Playable</strong> will be ignore, which explains the “less than or equal”.</p><p>In my implementation, I would like to make <strong>Playable</strong> to be more flexible: because we do not care about actual playback logic here, so if we don’t limit ourselves to just Video playback, but to whatever <em>playable</em> (eg: gif), we can build much more useful things with these components.</p><p>To make <strong>Playable</strong> extensible, I define one more abstract component that provides actual playback logic, and let <strong>Playable</strong> to depend on it. I call it the <strong>Bridge</strong>:</p><figure class="highlight plain"><div style="overflow:auto"><table><tr><td class="code"><pre><span class="line">Bridge: provides Playable with actual playback resource/logic</span><br></pre></td></tr></table></div></figure><p>Below is how <strong>Bridge</strong> looks like, and why it will empower the whole system:</p><img src="/2019/02/10/droidkaigi-2019-part-3/kohii_part3_2.gif"><p>As you can see, <strong>Bridge</strong> shares almost the same interface with <strong>Playable</strong>. Once created, <strong>Playable</strong> will also create a <strong>Bridge</strong> and levarage the callback from <strong>Playback</strong> to it. As <strong>Playable</strong> is bound to <strong>Target</strong>, it will then pass that <strong>Target</strong> to <strong>Bridge</strong> accordingly. When the <strong>Playback</strong> is no longer available, <strong>Playable</strong> will then release the <strong>Bridge</strong> and cleans up itself, make sure no resources leaking.</p><p>With this design, I can put whatever playback logic I want to the system, via the detailed implementation of <strong>Bridge</strong> (yeah, that’s why I name it <em>Bridge</em>). It can use the backend API from ExoPlayer, or MediaPlayer for fallback, or the <em>ijkplayer</em> which is another well-known media playback library built on top of <strong>ffmpeg</strong>, or something else (APIs for non-Video playback for example).</p><p>Below figure shows the flexible in practice:</p><img src="/2019/02/10/droidkaigi-2019-part-3/kohii_part3_3.gif"><p>The left video is my current implementation, and the one on the right uses the dummy Bridge implementation to showcase in DroidKaigi (which I could not &gt;.&lt;).</p><p>It is about how flexible this approach can be. Next, I will talk about the Brigde for ExoPlayer: <strong>ExoBridge</strong>.</p><p>Before going into this implementation, below is the core definition of a <strong>Bridge</strong></p><figure class="highlight kotlin"><figcaption><span>Bridge</span></figcaption><div style="overflow:auto"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Bridge</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//  set/get</span></span><br><span class="line">  <span class="keyword">var</span> playerView: PlayerView?</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">prepare</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/** [com.google.android.exoplayer2.Player.setPlayWhenReady] to true */</span></span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">play</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/** [com.google.android.exoplayer2.Player.setPlayWhenReady] to false */</span></span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">pause</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">release</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><h4 id="3-1-ExoBridge-implementation"><a href="#3-1-ExoBridge-implementation" class="headerlink" title="3.1 ExoBridge implementation"></a>3.1 ExoBridge implementation</h4><p><strong>First</strong>, here is the principle that ExoBridge bases on:</p><figure class="highlight plain"><div style="overflow:auto"><table><tr><td class="code"><pre><span class="line">- “More than one ExoPlayer instance” strategy</span><br><span class="line">  - Globally manage a Player Pool.</span><br><span class="line">  - Create ExoPlayer instance on demand, release to Pool for reuse.</span><br><span class="line">  - Cleanup Pool when no Managers are available.</span><br><span class="line">- Prepare resources as late as possible: in playable.play()</span><br><span class="line">  - Resource warming up will affect the scroll performance.</span><br><span class="line">  - Too early = frame drop at bad timing.</span><br></pre></td></tr></table></div></figure><p>Implementation of ExoBridge can be summarized as below:</p><figure class="highlight plain"><div style="overflow:auto"><table><tr><td class="code"><pre><span class="line">- Global Singleton manages Player instances in Pool</span><br><span class="line">  - Create and Release by Bridge’s demand.</span><br><span class="line">- Target: PlayerView.</span><br><span class="line">- prepare(): Do nothing to ExoPlayer resource. Just to init listeners.</span><br><span class="line">- play(): lazily create resource, then call play from ExoPlayer instance.</span><br><span class="line">  - Ensure ExoPlayer instance, create if need. </span><br><span class="line">  - Ensure MediaSource instance, create if need.</span><br><span class="line">- pause(): normally pause if in playing state</span><br><span class="line">- release(): release MediaSource, “release” ExoPlayer instance to </span><br><span class="line">ExoPlayer instance Pool</span><br><span class="line">- ExoPlayer is actually released when no Managers are available</span><br></pre></td></tr></table></div></figure><p>You can find the full-version of this in <a href="https://github.com/eneim/kohii/blob/dev-v1/kohii/src/main/java/kohii/v1/exo/ExoBridge.kt" target="_blank" rel="noopener">my repository</a>.</p><p>Bring it all together, we have the following figure, describing how my approach works:</p><img src="/2019/02/10/droidkaigi-2019-part-3/kohii_part3_4.gif"><p>And finally, below is how you can use it from your code:</p><figure class="highlight kotlin"><div style="overflow:auto"><table><tr><td class="code"><pre><span class="line">Kohii[activity].setUp(videoUrl)</span><br><span class="line">  .copy(tag = videoUrl)</span><br><span class="line">  .asPlayable()</span><br><span class="line">  .bind(playerView)</span><br></pre></td></tr></table></div></figure><p>With one line above, your <code>playerView</code> will be prepared once visible, and start the playback automatically. If user scrolls the <code>playerView</code> offscreen (or partly visible, not good enough for UX), it will pause the playback automatically.</p><p>If you want to keep this playback continues in new lifecycle (says new Activity), in that Activity’s onCreate or onStart, call:</p><figure class="highlight kotlin"><div style="overflow:auto"><table><tr><td class="code"><pre><span class="line">Kohii[activity].findPlayable(tag = videoUrl)</span><br><span class="line">  ?.bind(playerView)</span><br></pre></td></tr></table></div></figure><p>For exact usage, please refer to <a href="https://github.com/eneim/kohii" target="_blank" rel="noopener">the repository</a>.</p><p>That is. I have shared with all of you about my new approach for using <strong>ExoPlayer in RecyclerView</strong>. At the moment, many design concepts are in my bluesprint. I’m working hard to bring it to life and hoping it can help a lot of developers those are having the same need can find one more solution.</p><div class="qrcode"><img id="post-qrcode" src="data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='8960' height='8960' viewBox='0 0 35 35'%3e%3cpath d='M1 1h7v7h-7zM9 1h1v1h-1zM13 1h1v1h-1zM15 1h4v2h-1v1h-1v-2h-2zM21 1h1v1h-1zM23 1h3v2h-1v-1h-2zM27 1h7v7h-7zM2 2v5h5v-5zM20 2h1v1h-1zM22 2h1v2h-1zM28 2v5h5v-5zM3 3h3v3h-3zM11 3h1v1h1v-1h2v1h-1v1h-1v2h-1v3h-1v1h-1v-1h-1v1h-1v-1h-1v-1h2v-5h1v1h1v1h-1v2h1v-2h1v-1h-1zM29 3h3v3h-3zM15 4h1v4h1v-2h1v2h1v1h2v1h-1v1h-1v-1h-1v-1h-3v-2h-1v-2h1zM18 4h2v1h1v-1h1v2h-1v1h-1v1h-1v-3h-1zM23 4h3v2h-2v-1h-1zM13 7h1v2h-1zM21 7h1v1h-1zM23 7h1v1h1v-1h1v2h-1v1h1v1h-1v1h-1v-1h-2v1h1v1h-1v1h-1v-1h-1v1h-1v-1h-1v-1h-1v1h-1v1h-1v1h-1v-2h1v-1h1v-1h-2v-1h4v1h1v1h2v-2h1v-2h1zM1 9h1v1h-1zM5 9h1v1h-1zM23 9v1h1v-1zM26 9h5v1h-2v1h-1v1h-1v1h-1v-2h1v-1h-1zM33 9h1v1h-1zM2 10h2v1h-2zM6 10h1v1h-1zM32 10h1v1h-1zM4 11h2v3h-1v-2h-1zM7 11h1v1h-1zM11 11h1v1h-1zM13 11h1v2h-2v-1h1zM29 11h3v1h-3zM1 12h1v2h-1zM32 12h1v3h-1zM7 13h2v1h-2zM11 13h1v1h-1zM25 13h1v2h-1v1h1v1h2v2h-3v1h1v1h-2v1h-1v-2h1v-1h-3v-2h-2v1h1v2h-1v-1h-2v1h1v2h-2v1h1v1h1v-1h1v-1h1v-2h1v2h2v1h1v-1h1v2h-2v2h-1v-2h-1v-1h-1v1h-1v2h-1v-1h-2v-1h-3v2h1v1h2v-1h2v1h-1v1h-2v1h2v1h-2v2h1v1h1v1h-2v-1h-1v-1h-1v-1h1v-3h-1v2h-2v-1h-1v-1h-1v-3h-1v-1h-1v-1h3v2h1v1h-1v1h1v-1h1v-1h-1v-2h1v-1h-2v-3h1v1h1v1h2v-1h2v-1h-1v-1h1v-1h1v1h1v-2h1v-1h1v-1h1v2h1v-1h2v-1h1zM27 13h1v1h-1zM29 13h1v1h-1zM2 14h1v1h-1zM6 14h1v1h-1zM9 14h1v1h-1zM12 14h1v1h-1zM17 14h2v1h-1v1h-1zM30 14h1v1h-1zM4 15h2v1h-1v1h-1zM7 15h2v1h-2zM10 15h1v2h-1zM13 15h1v1h-1zM15 15h1v2h-1zM26 15h1v1h-1zM29 15h1v1h-1zM33 15h1v1h-1zM2 16h1v1h-1zM6 16h1v1h1v1h-2v1h-1v-2h1zM12 16h1v2h-1zM23 16v2h2v-1h-1v-1zM28 16h1v1h-1zM30 16h1v2h1v-2h1v1h1v1h-1v2h1v2h-1v-1h-1v-2h-3v-1h1zM1 17h1v1h-1zM2 18h1v1h-1zM13 18h1v2h-1zM1 19h1v1h-1zM4 19h1v2h-3v-1h2zM6 19h2v1h-1v1h1v-1h1v2h-4v-1h1zM28 19h1v1h1v2h-3v-1h1zM1 21h1v2h-1zM31 21h1v3h-1v2h2v4h1v1h-3v-1h1v-2h-1v2h-2v1h-3v-1h-2v-2h1v-1h-1v-1h1v-1h1v-3h1v1h1v1h-1v1h1v-1h1v-1h2zM14 22v1h1v-1zM3 23h3v1h-3zM33 23h1v3h-1v-1h-1v-1h1zM1 25h2v1h-2zM4 25h4v1h-4zM20 25h1v1h-1zM21 26h1v1h-1zM26 26v3h3v-3zM1 27h7v7h-7zM18 27h1v1h1v1h2v1h-1v2h2v2h-1v-1h-2v-3h-1v-1h-1zM22 27h2v1h-1v1h-1zM27 27h1v1h-1zM2 28v5h5v-5zM3 29h3v3h-3zM9 29h1v1h-1zM17 30h1v2h-1zM22 30h2v1h-2zM10 31h1v1h-1zM24 31h1v1h-1zM30 31h1v3h-4v-1h2v-1h1zM18 32h1v2h-1zM25 32h1v2h-2v-1h1zM33 32h1v2h-2v-1h1zM9 33h5v1h-5z'/%3e%3c/svg%3e" style="width: 128px; height: 128px;"/><p class="notice">Scan the QR code to share this article</p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In &lt;a href=&quot;/2019/02/10/droidkaigi-2019-part-1/&quot;&gt;part 1&lt;/a&gt; and &lt;a href=&quot;/2019/02/10/droidkaigi-2019-part-2/&quot;&gt;part 2&lt;/a&gt;, I have discusse
      
    
    </summary>
    
    
      <category term="Android" scheme="https://ene.im/tags/android/"/>
    
      <category term="RecyclerView" scheme="https://ene.im/tags/recyclerview/"/>
    
      <category term="ExoPlayer" scheme="https://ene.im/tags/exoplayer/"/>
    
      <category term="2019" scheme="https://ene.im/tags/2019/"/>
    
      <category term="DroidKaigi" scheme="https://ene.im/tags/droidkaigi/"/>
    
  </entry>
  
  <entry>
    <title>Droidkaigi 2019 (part 2)</title>
    <link href="https://ene.im/2019/02/10/droidkaigi-2019-part-2/"/>
    <id>https://ene.im/2019/02/10/droidkaigi-2019-part-2/</id>
    <published>2019-02-10T14:44:04.000Z</published>
    <updated>2019-02-10T14:44:04.252Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2-The-proposal"><a href="#2-The-proposal" class="headerlink" title="2. The proposal"></a>2. The proposal</h2><p>I would dedicate this whole post to share about my proposal about this topic: “ExoPlayer in RecyclerView”. The presentation I used at DroidKaigi is below:</p><h4 id="2-1-Investigate-the-challenges"><a href="#2-1-Investigate-the-challenges" class="headerlink" title="2.1 Investigate the challenges"></a>2.1 Investigate the challenges</h4><p><strong>First</strong>, let’s start by investigating our challenges. I would like to start from the fullscreen playback experience.</p><p>In fact, the experience including user open a dedicated playback screen for one item from the list, I would like to call it <strong>Single Player</strong> instead of Fullscreen.</p><p>Let’s think about this experience. How many form factor of <strong>Single Player</strong> we have? Of course, it depends on how you design your App, but roughly thinking, there are 3 forms we can use to represent the <strong>Single Player</strong>:</p><ul><li>Same orientation Player</li><li>Multi windows state Player</li><li>Landscape Player</li></ul><img src="/2019/02/10/droidkaigi-2019-part-2/types_of_single_player.png"><p>There may be more, for example Picture-In-Picture mode. But implement it is not trivial, I would like to spend other post for it.</p><p>Opening Single Player and back has the following challenges in term of UX:</p><figure class="highlight plain"><div style="overflow:auto"><table><tr><td class="code"><pre><span class="line">- Opening Single Player has many chances for config changes</span><br><span class="line">- Handle config changes manually (= add manifest entry)</span><br><span class="line">  - Pros: no resource reloading, playback continuity done!</span><br><span class="line">  - Cons: no adaptive layout, or manually apply using if/else/while… (not me (&gt;_&lt;))</span><br><span class="line">  - Many config changes patterns = error prone</span><br><span class="line">- Handle config changes automatically (= no manifest entry)</span><br><span class="line">  - Pros: adaptive layout for each config</span><br><span class="line">  - Cons/Unresolved: playback continuity</span><br></pre></td></tr></table></div></figure><p>Let’s take an example of Facebook app to see how the experience works in practice:</p><img src="/2019/02/10/droidkaigi-2019-part-2/ui_pattern_facebook.png"><ol><li><p>User from homescreen click to an item and open its <strong>Single Player</strong> in the same orientation.</p></li><li><p>User from homescreen, rotate the phone. It will open the <strong>Single Player</strong> in landscape mode automatically.</p></li><li><p>User rotate the phone from “same orientation Single Player”. It will open the <strong>Single Player</strong> in landscape mode automatically.</p></li></ol><p>We can see that in 2. and 3., there is chance for configuration change.</p><p>Above, we discussed about the form factor of a Single Player. Below is common flow to open one:</p><figure class="highlight plain"><div style="overflow:auto"><table><tr><td class="code"><pre><span class="line">- Open single player on new Activity</span><br><span class="line">- Open single player on Dialog (fullscreen, in same Activity)</span><br><span class="line">- Open in Fragment by replacing current one (in same Activity).</span><br></pre></td></tr></table></div></figure><p>Of course, there may be more, but it will end up asking us the same questions:</p><figure class="highlight plain"><div style="overflow:auto"><table><tr><td class="code"><pre><span class="line">- How to open Single Player and keep the playback continuity?</span><br><span class="line">- How to come back and keep the playback continuity?</span><br></pre></td></tr></table></div></figure><p>So to summarize, our implementation should ends up answering the following questions:</p><ul><li>How we handle all the changes during opening Single Player and back from it?</li><li>How we ensure playback continuity?</li></ul><h4 id="2-2-Principle-strategy-and-Components"><a href="#2-2-Principle-strategy-and-Components" class="headerlink" title="2.2 Principle (strategy) and Components"></a>2.2 Principle (strategy) and Components</h4><p><strong>Next</strong>, let me talk about my Proposal, starting from the principles I would follow to design it:</p><figure class="highlight plain"><div style="overflow:auto"><table><tr><td class="code"><pre><span class="line">- Balance UX and performance</span><br><span class="line">  - 2019 devices has more RAM than my Mac</span><br><span class="line">  - And more CPU cores too</span><br><span class="line">  - UX gain requries Performance loss</span><br><span class="line">- Avoid resource reloading as much as possible.</span><br><span class="line">  - No reload on config change</span><br><span class="line">- Well lifecycle control does the magic</span><br><span class="line">  - Design lifecycle flow if need</span><br></pre></td></tr></table></div></figure><p>To accomplish those principles, here is how I make it: (1) design a mechanism where an instance of our “playback” could survive across many changes, including configuration changes (the recreation of an Activity), as well as lifecycle change (from one Activity to another, or from a Fragment to another). (2) design a resource management mechanism such that, it would retain just enough amount of resource (eg: ExoPlayer instances). The definition of ‘enough amount’ would vary, below is mine:</p><figure class="highlight plain"><div style="overflow:auto"><table><tr><td class="code"><pre><span class="line">- Max instance number = max number of Videos on screen at once</span><br><span class="line">  - Play then Pause video + still on screen = holds an Player instance.</span><br><span class="line">  - Play then Pause video + scrolled off screen → release Player instance to Global Pool.</span><br><span class="line">  - Release video = instance is stored in Pool for reuse.</span><br></pre></td></tr></table></div></figure><p>So, in this approach, the more videos you have on screen, the less performant the App will be.</p><p>One good point of my approach is that, it doesn’t force the client to follow this principle always, but it allows for customization that just need to meet some certain requirements.</p><p>Below is my explanation for (1): a mechanism to keep the playback continuity.</p><p>First, we need some components to make it happens:</p><ul><li><strong>Playable</strong>: a piece of resource, can be played. Example: an ExoPlayer instance</li><li><strong>Target</strong>: to which a <strong>Playable</strong> can be played on, the object to present the playback on. Eg: PlayerView (in ExoPlayer library)</li><li><strong>Playback</strong>: when a <strong>Playable</strong> is bound to a <strong>Target</strong>, it produces a <strong>Playback</strong>. <strong>Playback</strong> represents the connection of a <strong>Playable</strong> and <strong>Target</strong></li></ul><p>These components form a team and work together:</p><ul><li><strong>Playable</strong> ⇆ <strong>Target</strong> binding is unique, but not required<ul><li>Binding same target will produce same <strong>Playback</strong> instance.</li><li>Different <strong>Playable</strong>s bind to one <strong>Target</strong>: the later wins.</li><li>Not in bound <strong>Playable</strong> will be cleaned up eventually.</li></ul></li><li><strong>Playable</strong> must be bound to <strong>Target</strong> to be “noticed”</li><li><strong>Playback</strong> observes <strong>Target</strong>‘s behavior and trigger <strong>Playable</strong></li></ul><img src="/2019/02/10/droidkaigi-2019-part-2/kohii_components_1.gif"><p>The inspiration behind this model is the blow line fro ExoPlayer</p><figure class="highlight kotlin"><div style="overflow:auto"><table><tr><td class="code"><pre><span class="line">PlayerView.switchTargetView(player, <span class="literal">null</span>, playerView)</span><br></pre></td></tr></table></div></figure><p>Because these components belong to a team, we need something to manage that team. And in our App, there will be many teams (many lifecycles), we also need something to manage those teams:</p><ul><li><strong>Manager</strong>: manages <strong>Playback</strong> instances (also, acknowledge the Playable)<ul><li>Ensure <strong>Playback</strong> uniqueness</li><li>One Playable can belong to at-most one Manager</li></ul></li><li><strong>Global singleton</strong>: manages <strong>Manager</strong>s and <strong>Playable</strong>s<ul><li>Also manage low layer resources like ExoPlayer instances, Factories</li><li>Observe lifecycles and dispatch actions to <strong>Manager</strong>s</li></ul></li></ul><p>I just say that <strong>Playable</strong> is in a team managed by <strong>Manager</strong>, but in fact, this <em>guy</em> is like us, developers. We stay in this project and then move to other project on demand. <strong>Playable</strong> is what we use to create what I called <strong>Playback Continuity</strong> before. To demonstrate this, let’s move to <em>components’ lifespan</em> and a figure below:</p><p><strong>Compoent’s lifespan</strong></p><ul><li>Components stay alive as long as possible<ul><li><strong>Playable</strong>: contains only resource for playback, stays in Application lifecycle</li><li><strong>Target</strong>: View, stays in Activity/Fragment lifecycle</li><li><strong>Playback</strong>: min(<strong>Target</strong>, <strong>Playable</strong>), stays in Activity/Fragment lifecycle</li></ul></li><li><strong>Playable</strong> survives config changes</li><li><strong>Playable</strong> can survive lifecycle changes if need<ul><li>eg: from Activity to Activity</li></ul></li><li><strong>Manager</strong>, <strong>Playback</strong>: stay in Activity/Fragment lifecycle<ul><li>Do not survive config changes</li></ul></li></ul><p><strong>Component’s lifecycle in action</strong></p><img src="/2019/02/10/droidkaigi-2019-part-2/kohii_components_2.gif"><p>With these components, the way we keep the playback continuity is as follow: by switching the Target of a Playable, we do not need to recreate it or reprepare it. So says our current Target A is in the list inside Fragment A, when we open <em>single player</em> for it in Fragment B (and the playback surface is Target B), we rebind the Playable from Target A to Target B. Done!</p><p>But wait, replacing Fragments will involve a lot of changes, including Fragment destroying and creating. So how our Playable survices those changes? Let move to <strong>cross-lifecycles</strong>.</p><p><strong>Cross-lifecycles</strong></p><p><strong>Cross-lifecycles</strong> is the behavior when something happens in a lifecycle and keeps happening in another lifecycle started by current one. For example: a Video playing inside Activity, if this App using new Activity for single player, the Video should be playing after opening single player Activity from current one.</p><p>There are many patterns of <strong>cross-lifecycles</strong>:</p><ul><li>Starting Activity from current Activity (in this case, old Activity will be stopped).</li><li>Replacing Fragment by another Fragment (in this case, old Fragment will have it View destroyed by default).</li><li>Opening a DialogFragment from current Fragment (in this case, old Fragment is still active).</li><li>Config change is a special scenario of <strong>cross-lifecycle</strong>, where the same Activity is recreated on demand.</li></ul><p>In my approach, keeping <strong>Playable</strong> survive through <strong>cross-lifecycle</strong> is equal to keeping <strong>playback continuity</strong>. We investigate <strong>cross-lifecycles</strong> patterns below, and ses how our components work with them?</p><h4 id="1-Configuration-changes"><a href="#1-Configuration-changes" class="headerlink" title="1. Configuration changes"></a>1. Configuration changes</h4><img src="/2019/02/10/droidkaigi-2019-part-2/kohii_cross_lifecycles_1.gif"><p>As you can see from the figure: once config change happens, the Activity will tell it to client via the call <code>isChangingConfigurations</code>. Catching that value, we will know if we should keep our Playables survive or release them. In case of config change, if after the creation, the Activity still use the Playable, we keep it in Global cache, and rebind it after the recreation. That way, our Playale will just keep playing.</p><h4 id="2-Starting-Activity-from-Activity"><a href="#2-Starting-Activity-from-Activity" class="headerlink" title="2. Starting Activity from Activity"></a>2. Starting Activity from Activity</h4><p>There is no <code>isChangingConfigurations</code> signal in this case. Instead, we follow the lifecycle callback of each. Says from Activity A, the client calls <code>startActivity</code> to start single player in Activity B. The figure below shows how we handle this case:</p><img src="/2019/02/10/droidkaigi-2019-part-2/kohii_cross_lifecycles_2.gif"><p>Yeah it is. In this scenario: after calling <code>startActivity</code> from Activity A to open Activity B, first Activity B will be created, then started, after that Activity will be stopped and destroyed. So in Activity B’s <code>onStart</code> or <code>onCreate</code>, it just needs to <em>take</em> the Playable from Activity A, this Playable will be unchanged, and our playback will keep playing continously.</p><h4 id="3-Replacing-Fragment-by-a-Fragment"><a href="#3-Replacing-Fragment-by-a-Fragment" class="headerlink" title="3. Replacing Fragment by a Fragment"></a>3. Replacing Fragment by a Fragment</h4><p>Consider the case: client open single player in Fragment B, using Activity’s <code>FragmentManager</code> to replace current Fragment A with it. Because Fragment represents the same lifecycle sequence with Activity, so we hope the same timeline above will be true for Fragment.</p><p>By default, it is not. Fragment A will be destroyed first before the creation of Fragment B. During the gap between a destruction and a creation, we have no clue to rely on, to keep our Playable alive.</p><p>But, we are lucky. Latest support Fragment library brings the method <a href="https://developer.android.com/reference/kotlin/androidx/fragment/app/FragmentTransaction#setReorderingAllowed%28kotlin.Boolean%29" target="_blank" rel="noopener"><code>setReorderingAllowed</code></a> to live, which allow Fragment transaction to happen in the same way Activities’ lifecycle. So we have the same methodology to keep Playable alive across FragmentTransaction:</p><img src="/2019/02/10/droidkaigi-2019-part-2/kohii_cross_lifecycles_3.png"><h4 id="4-Opening-DialogFragment-from-Fragment-Activity"><a href="#4-Opening-DialogFragment-from-Fragment-Activity" class="headerlink" title="4. Opening DialogFragment from Fragment/Activity"></a>4. Opening DialogFragment from Fragment/Activity</h4><p>There is no destruction in this scenario. We can simple <em>take</em> the Playable to play inside the DialogFragment.</p><p>I will explain about <em>taking the Playable</em> in detail later.</p><h4 id="Combine-those-scenarios"><a href="#Combine-those-scenarios" class="headerlink" title="Combine those scenarios"></a>Combine those scenarios</h4><p>Combining those scenarios we discussed above, we could keep a Playable alive through various lifecycle transition, which in turns, keep our playback continuity:</p><img src="/2019/02/10/droidkaigi-2019-part-2/kohii_cross_lifecycles_4.gif"><h4 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h4><p>As shown above, by understanding the <strong>cross-lifecycles</strong> behavior, and use it correctly, we can keep the playback play continuously, across various transition, including configuration changes.</p><p>In next part, I would like to show how my approach manage the playback resource, make it work together with the components I define in this part, and finally how we would combine all of them in our final goal: to make ExoPlayer works in RecyclerView with ease.</p><div class="qrcode"><img id="post-qrcode" src="data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='8960' height='8960' viewBox='0 0 35 35'%3e%3cpath d='M1 1h7v7h-7zM9 1h2v1h-2zM13 1h1v1h-1zM15 1h4v2h-1v1h-1v-2h-2zM21 1h1v1h-1zM23 1h3v2h-1v-1h-2zM27 1h7v7h-7zM2 2v5h5v-5zM11 2h1v1h-1zM20 2h1v1h-1zM22 2h1v1h1v1h2v2h-2v-1h-1v-1h-1zM28 2v5h5v-5zM3 3h3v3h-3zM10 3h1v1h-1zM13 3h2v1h-1v1h1v-1h1v4h1v-2h1v2h1v1h2v1h-1v1h-1v-1h-1v-1h-3v-2h-1v2h-1v1h-2v2h2v-1h1v2h1v-1h1v-1h-2v-1h4v1h1v1h2v-2h1v-2h1v-1h1v1h1v-1h1v2h-1v1h1v1h-1v1h-1v-1h-2v1h1v1h-1v1h-1v-1h-1v1h-1v-1h-1v-1h-1v1h-1v1h-1v1h-1v-1h-1v-1h-2v1h-1v-4h-1v1h-1v-1h-1v-1h2v-5h1v1h2v3h1v-3h-1v-1h1zM29 3h3v3h-3zM18 4h2v1h1v-1h1v2h-1v1h-1v1h-1v-3h-1zM10 6v2h1v-2zM21 7h1v1h-1zM1 9h1v1h-1zM5 9h1v1h-1zM23 9v1h1v-1zM26 9h5v1h-2v1h-1v1h-1v1h-1v-2h1v-1h-1zM33 9h1v1h-1zM2 10h2v1h-2zM6 10h1v1h-1zM32 10h1v1h-1zM4 11h2v1h-2zM7 11h1v1h-1zM29 11h3v1h-3zM1 12h1v1h-1zM32 12h1v3h-1zM5 13h1v1h-1zM7 13h2v1h1v1h-1v1h-2v-1h1v-1h-1zM25 13h1v2h-1v1h1v1h2v2h-3v1h1v1h-2v1h-1v-2h1v-1h-3v-2h-2v1h1v2h-1v-1h-2v1h1v2h-2v-3h-1v-1h1v-1h1v1h1v-2h1v-1h1v-1h1v2h1v-1h2v-1h1zM27 13h1v1h-1zM29 13h1v1h-1zM2 14h1v1h-1zM6 14h1v1h-1zM11 14h2v2h-1v-1h-1zM17 14h2v1h-1v1h-1zM30 14h1v1h-1zM3 15h1v1h1v1h-3v-1h1zM5 15h1v1h-1zM10 15h1v2h-2v-1h1zM15 15h1v2h-1zM26 15h1v1h-1zM29 15h1v1h-1zM33 15h1v1h-1zM6 16h1v1h2v1h-3v1h-1v-2h1zM23 16v2h2v-1h-1v-1zM28 16h1v1h-1zM30 16h1v2h1v-2h1v1h1v1h-1v2h1v2h-1v-1h-1v-2h-3v-1h1zM1 17h1v1h1v2h-1v-1h-1zM13 18h1v1h1v1h-2zM4 19h1v1h1v1h-1v2h-1v-2h-1v-1h1zM6 19h2v1h-2zM11 19h1v1h-1zM28 19h1v1h1v2h-3v-1h1zM8 20h1v1h1v1h-1v1h-1v-1h-1v-1h1zM20 20h1v2h2v1h1v-1h1v2h-2v2h-1v-2h-1v-1h-1v1h-1v2h-1v-1h-2v-1h-2v-1h3v1h1v-1h1v-1h1zM1 21h1v2h-1zM11 21h2v3h1v1h-3v-2h1v-1h-1zM14 21h1v1h-1zM31 21h1v3h-1v2h2v4h1v1h-3v-1h1v-2h-1v2h-2v1h-3v-1h-2v-2h1v-1h-1v-1h1v-1h1v-3h1v1h1v1h-1v1h1v-1h1v-1h2zM3 23h1v1h1v1h3v-1h1v1h2v1h-1v2h-1v-2h-8v-1h2zM5 23h1v1h-1zM7 23h1v1h-1zM33 23h1v3h-1v-1h-1v-1h1zM20 25h1v1h-1zM11 26h4v1h1v-1h2v1h-1v1h-1v1h1v1h-1v1h-1v1h1v1h1v1h-2v-1h-1v-5h-1v5h-1v-5h-1zM21 26h1v1h-1zM26 26v3h3v-3zM1 27h7v7h-7zM18 27h1v1h1v1h2v1h-1v2h2v2h-1v-1h-2v-3h-1v-1h-1zM22 27h2v1h-1v1h-1zM27 27h1v1h-1zM2 28v5h5v-5zM3 29h3v3h-3zM9 29h1v1h-1zM17 30h1v2h-1zM22 30h2v1h-2zM10 31h1v1h-1zM24 31h1v1h-1zM30 31h1v3h-4v-1h2v-1h1zM18 32h1v2h-1zM25 32h1v2h-2v-1h1zM33 32h1v2h-2v-1h1zM9 33h3v1h-3zM13 33h1v1h-1z'/%3e%3c/svg%3e" style="width: 128px; height: 128px;"/><p class="notice">Scan the QR code to share this article</p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;2-The-proposal&quot;&gt;&lt;a href=&quot;#2-The-proposal&quot; class=&quot;headerlink&quot; title=&quot;2. The proposal&quot;&gt;&lt;/a&gt;2. The proposal&lt;/h2&gt;&lt;p&gt;I would dedicate thi
      
    
    </summary>
    
    
      <category term="Android" scheme="https://ene.im/tags/android/"/>
    
      <category term="RecyclerView" scheme="https://ene.im/tags/recyclerview/"/>
    
      <category term="ExoPlayer" scheme="https://ene.im/tags/exoplayer/"/>
    
      <category term="2019" scheme="https://ene.im/tags/2019/"/>
    
      <category term="DroidKaigi" scheme="https://ene.im/tags/droidkaigi/"/>
    
  </entry>
  
  <entry>
    <title>Droidkaigi 2019 (part 1)</title>
    <link href="https://ene.im/2019/02/10/droidkaigi-2019-part-1/"/>
    <id>https://ene.im/2019/02/10/droidkaigi-2019-part-1/</id>
    <published>2019-02-10T14:43:58.000Z</published>
    <updated>2019-02-10T14:43:58.190Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-Attending-DroidKaigi-2019"><a href="#0-Attending-DroidKaigi-2019" class="headerlink" title="0. Attending DroidKaigi 2019"></a>0. Attending DroidKaigi 2019</h2><p>One of my TODOs this year is to attend more tech conferences, starting from Android and will include other technologies as well. And not just being there listening, I would like to share what I’m doing too. In 2 days from Feb 7th, Feb 8th this year, I had a chance to be speaker at <a href="https://droidkaigi.jp/2019/" target="_blank" rel="noopener">DroidKaigi 2019</a> in Tokyo Japan where I’m located in.</p><p>The overall experience was great. The event is so well organized thanks to the team. Though my talk was not so good, I could finish just 80% of it, so it is not quite a good start for me this year. To be honest, after my CFP was accepted, I got a bad health condition and need to spend couple weeks in the hospital. After going back, the remaining time was quite tight so it may be one of the reason. But after all, I know that I need to do much more to be better next time.</p><p>Ok. The remaining of this post, I would like to share my talk at DroidKaigi, including part that I could not finish.</p><img src="/2019/02/10/droidkaigi-2019-part-1/droidkaigi_speech_1.png"><h2 id="1-My-talk-about-‘ExoPlayer-in-RecyclerView’"><a href="#1-My-talk-about-‘ExoPlayer-in-RecyclerView’" class="headerlink" title="1. My talk about ‘ExoPlayer in RecyclerView’"></a>1. My talk about ‘ExoPlayer in RecyclerView’</h2><p>The title is “ExoPlayer in RecyclerView, a proposal” and you can get the deck here:</p><p>The talk is structured as below:</p><ul><li>Brief introduction, about the talk and about the speaker.</li><li>Motivation: why I want to talk about ExoPlayer in RecyclerView.</li><li>Common approach to integrate ExoPlayer in RecyclerView and its issue from my point of view.</li><li>My proposal to fix them and make the implementation better.</li><li>I also share a demo App to demonstrate how my proposal can help to build various UX that involve ExoPlayer in not only RecyclerView but also ViewPager, NestedScrollView as well.</li></ul><h4 id="1-0-Before-we-start"><a href="#1-0-Before-we-start" class="headerlink" title="1.0 Before we start"></a>1.0 Before we start</h4><p>I have built a demo application for this talk. The source code is on github as well. Before getting further, I would like to share links them here, so for those who has already go though my talk and my slides, you can grab the code right here.</p><p><a href="https://play.google.com/apps/testing/kohii.v1.sample" target="_blank" rel="noopener">Demo App (Google Play Beta)</a><br><a href="https://github.com/eneim/kohii" target="_blank" rel="noopener">Source Code (library &amp; sample)</a></p><h4 id="1-1-About-speaker-and-the-motivation-behind"><a href="#1-1-About-speaker-and-the-motivation-behind" class="headerlink" title="1.1 About speaker and the motivation behind"></a>1.1 About speaker and the motivation behind</h4><p>I’m Nam and I have been using using ‘eneim’ (pronounced <code>/ɛn/ /eɪ/ /ɛm/</code>) for a while.</p><p>For those who are not familiar with ExoPlayer and RecyclerView yet, I suggest to go to <a href="https://github.com/google/ExoPlayer" target="_blank" rel="noopener">ExoPlayer repository</a> and <a href="https://developer.android.com/reference/androidx/recyclerview/widget/RecyclerView" target="_blank" rel="noopener">RecyclerView documentation</a> first.</p><p>The motivation behind the topic “ExoPlayer in RecyclerView” comes from recent applications like Facebook and Twitter, where their <em>timeline</em> contain various types of content including Video, and those Video will be played/paused on User interaction (scroll, swipe, etc). Furthermore, changing device orientation or opening the App in multi-windows mode will automatically open fullscreen or more rich UXes.</p><p>It is not just talking, but there is also actual need out there. Here I would like to mention a 3-year-old issue on ExoPlayer repository, which is not resolved yet today:</p><p><a href="https://github.com/google/ExoPlayer/issues/867" target="_blank" rel="noopener">“How to use ExoPlayer in a ListView or RecyclerView?”</a></p><figure class="highlight plain"><div style="overflow:auto"><table><tr><td class="code"><pre><span class="line">I want to use ExoPlayer in a RecyclerView as a part of row item.</span><br><span class="line">I want to make a customer view and wrap the ExoPlayer in that view.</span><br><span class="line"> </span><br><span class="line">Do you have some advice?</span><br><span class="line"> </span><br><span class="line">Thank you!</span><br></pre></td></tr></table></div></figure><p>After a few years working on this requirement, I understand that a full implementation would at least contain:</p><figure class="highlight plain"><div style="overflow:auto"><table><tr><td class="code"><pre><span class="line">- Video player in RecyclerView, ViewPager, ScrollView, etc </span><br><span class="line">- ExoPlayer or whatever works</span><br><span class="line">- Auto play/pause on scroll? (like Facebook, Instagram, Twitter, etc)</span><br><span class="line">- Fullscreen back and forth, smoothly</span><br><span class="line">- Network usage friendly, battery friendly, UX/UI friendly, etc friendly</span><br></pre></td></tr></table></div></figure><p>To understand more on this requirement, I investigated some top of the class applications, figure out how they are doing.</p><h4 id="1-2-Market-research"><a href="#1-2-Market-research" class="headerlink" title="1.2 Market research"></a>1.2 Market research</h4><ol><li>Facebook</li></ol><p>Facebook app has the following good UX implemented:</p><figure class="highlight plain"><div style="overflow:auto"><table><tr><td class="code"><pre><span class="line">- Auto play/pause on scroll</span><br><span class="line">- Dialog for fullscreen player</span><br><span class="line">- Auto fullscreen on landscape</span><br></pre></td></tr></table></div></figure><p>But what is not so good from my observation is: <code>the playback is unstable under config changes, video reload on config change?</code>.</p><ol start="2"><li>YouTube</li></ol><p>YouTube is another really good app. It has rich UI/UX and it was really wel-built. The playback UX is as below:</p><figure class="highlight plain"><div style="overflow:auto"><table><tr><td class="code"><pre><span class="line">- Great UX in single item play</span><br><span class="line">  - Has mini/overlay player when user swipe down.</span><br><span class="line">- Well config change handling</span><br><span class="line">  - Animation on layout change, etc.</span><br><span class="line">- Latest: optional auto play in list</span><br></pre></td></tr></table></div></figure><p>Again, there is a tiny thing I concern about: <code>it would reload the Video when I switch from list to single player</code>.</p><ol start="3"><li>AbemaTV</li></ol><p>Last but not least, AbemaTV app, one of my favourite TV app in Japan. Beside good TV playback experience, it has</p><figure class="highlight plain"><div style="overflow:auto"><table><tr><td class="code"><pre><span class="line">- ViewPager + ExoPlayer?</span><br><span class="line">- Auto switching to fullscreen on landscape and back</span><br></pre></td></tr></table></div></figure><p>AbemaTV shows a channel in a Page of ViewPager, and when I change a page, then back to it right after, it will reload the channel, which is not so great.</p><p>Here, I would like to emphasize on what is my goal and why I always concern about the reloading issue: <strong>the playback continuity</strong>.</p><p>What is that?</p><p><strong>Playback continuity</strong> is an important part of Video playback experience. So when playing a Video, you have the image part, and the sound part. In Android, the image part is rendered to Surface object, and the sound part will be ‘rendered’ to the standard output. The <strong>playback continuity</strong> is the experience of having both, or one of them, being rendered continuously during the timeline.</p><p>Why ‘both, or one of them’? In Android, the whole playback experience would include the switching device orientation for larger visible area, changing window size to make room for other app, or opening Picture-in-Picture mode to serve special case. Each of them will trigger the well-known <code>configuration change</code> in Android system. If you handle the config change by hand (by adding a manifest entry to Activity, and overriding <code>onConfigurationChange</code> method), you are able to keep both of the streams. But if you have the system handle it for you (by not having manifest entry), because the UI will be recreated, your Surface object will also be recreated as well. (In fact, at really low level, I believe one would retain the Surface object (not the SurfaceView or TextureView instance) for reusability, but it requires much more effort. I will investigate further on this, but in this talk, I consider it is out of my concern). This recreation will discontinue the image stream. Therefor, your best effort is to have the sound part keep playing during the configuration change.</p><p>My proposal in this talk focus on keeping the actual playback continuity, by having the following behavior:</p><figure class="highlight plain"><div style="overflow:auto"><table><tr><td class="code"><pre><span class="line">- No resource reloading/rebuffering.</span><br><span class="line">- No audio discontinuity (accept the case of buffering </span><br><span class="line">next piece of resource).</span><br><span class="line">- Video discontinuity only on Surface recreation.</span><br></pre></td></tr></table></div></figure><h4 id="1-3-Challenges-common-approach-and-the-not-so-good-part"><a href="#1-3-Challenges-common-approach-and-the-not-so-good-part" class="headerlink" title="1.3 Challenges, common approach and the not so good part"></a>1.3 Challenges, common approach and the not so good part</h4><ol><li>Challenges</li></ol><p>What would be challenges when making ExoPlayer to work in RecyclerView? In fact, it is not too challenging if once could keep in mind some certain criteria like performance issues, reclycing of the ViewHolder, etc. But to have the playback continuity with decent config change handling, I find it to be really challenging.</p><p>To work with RecyclerView, you should be aware of the following points:</p><figure class="highlight plain"><div style="overflow:auto"><table><tr><td class="code"><pre><span class="line">- RecyclerView: scrollable, infinitely</span><br><span class="line">- Item (ViewHolder) is supposed to be reused/recycled </span><br><span class="line">- ViewHolder lifecycle</span><br><span class="line">  - Created/Bound/Recycled</span><br><span class="line">  - Attached/Detached</span><br></pre></td></tr></table></div></figure><p>And to work with ExoPlayer in RecyclerView, the points below are also important:</p><figure class="highlight plain"><div style="overflow:auto"><table><tr><td class="code"><pre><span class="line">- Many player instances = system performance down</span><br><span class="line">  - The more player instances, the lower performance</span><br><span class="line">- Many PlayerView = many Surfaces = surface creation/management cost</span><br><span class="line">  - The more Surfaces, the worse</span><br></pre></td></tr></table></div></figure><p>Furthermore, if your app also allow user to open a single player in fullscreen, and back, there are more problems we need to think about:</p><figure class="highlight plain"><div style="overflow:auto"><table><tr><td class="code"><pre><span class="line">- UI flow: decide how the UI of fullscreen would be: in different Activity? </span><br><span class="line">Replacing current Fragment? Multi-Windows mode?</span><br><span class="line">- Chances for configuration changes</span><br><span class="line">  - Config changes handling is complicated</span><br><span class="line">  - Config changes will impact playback continuity</span><br><span class="line">- Not only orientation change</span><br></pre></td></tr></table></div></figure><p>Most of the approaches use single ExoPlayer instance and reuse it across multiple playback. But I find that <code>controlling them too strictly, it is the UX to be affected</code>. An example is the case of AbemaTV app above.</p><ol start="2"><li>Common approach &amp; Issues</li></ol><p>Following the discussion on <a href="https://github.com/google/ExoPlayer/issues/867" target="_blank" rel="noopener">this issue on ExoPlayer</a>, as well as other approaches on github, I can summarize a common approach to have ExoPlayer work with RecyclerView as below:</p><figure class="highlight plain"><div style="overflow:auto"><table><tr><td class="code"><pre><span class="line">- PlayerView in ViewHolder</span><br><span class="line"></span><br><span class="line">- Adapter: manage ExoPlayer and MediaSource, </span><br><span class="line">  - MediaSource is created and bound to VH on demand</span><br><span class="line">  - Only “will play” ViewHolder will be provided by the ExoPlayer instance</span><br><span class="line"></span><br><span class="line">- Adapter’s callback to update playbacks</span><br><span class="line">  - onBindViewHolder → set MediaSource</span><br><span class="line">  - onViewAttachedToWindow/onViewDetachedFromWindow → prepare/release?</span><br><span class="line">  - onViewRecycled/onFailedToRecycleView → TODO?</span><br><span class="line"></span><br><span class="line">- RecyclerView callback to update playbacks (OnScrollListener)</span><br><span class="line">- Playback strategy: top-most visible → play, otherwise → pause</span><br><span class="line">- Reuse PlayerView: remove from “will pause” ViewHolder then </span><br><span class="line">add it to “will play” ViewHolder</span><br></pre></td></tr></table></div></figure><p>This approach is well thought, and could be enough to solve those challenges above. But it lack of the way to handle fullscreen back and forth, as well as it has tight control over playback resource, which is good for performance, but user experience will be impacted.</p><p>I summarize what could be the issues of this approach below:</p><figure class="highlight plain"><div style="overflow:auto"><table><tr><td class="code"><pre><span class="line">- Efficient Player management = UX loss</span><br><span class="line">  - Reuse one Player for many PlayerView → “black splash” on resume (like AbemaTV app)</span><br><span class="line">  - Re-buffering takes time</span><br><span class="line">- ViewHolder lifecycle</span><br><span class="line">  - onViewDetachedFromWindow is not always called</span><br><span class="line">  - setAdapter(null) ← to do or not to do?</span><br><span class="line">- UI Flow: to fullscreen and back</span><br><span class="line">  - Chance for configuration changes</span><br></pre></td></tr></table></div></figure><p><strong>Last but not least</strong>, if an app allow ‘Video reloading on config change’, there is one last concern I would like to talk about, which I call “the hidden issue of Video reloading”.</p><p>From the business point of view, playback view time is an important metrics. I cannot say for all applications, but how this view time is counted depends on both client and server side. Says ‘User views more than 50% of a Video length = 1 view time counted’. It is easy to observe if user has seen more than 50% length of a Video. But what happens when that user rotate the device to view in larger area? If this triggers a reloading, will it be counted as another view time by server? Or how would you handle that change?</p><p>Of course, it is the policy you define, and the mechanism you track the view count. But not reloading the Video will save you a lot of headache handling it.</p><h4 id="1-4-The-proposal"><a href="#1-4-The-proposal" class="headerlink" title="1.4 The proposal"></a>1.4 The proposal</h4><p>We have discussed about the motivation, the challenges, the common approach and its issues. From now I would like to introduce my approach and how it can not only solve many problems, but also be helpful to build many different user experiences, not just with RecyclerView.</p><div class="qrcode"><img id="post-qrcode" src="data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='8960' height='8960' viewBox='0 0 35 35'%3e%3cpath d='M1 1h7v7h-7zM9 1h2v2h-1v-1h-1zM13 1h1v1h-1zM15 1h4v2h-1v1h-1v-2h-2zM21 1h1v1h-1zM23 1h3v2h-1v-1h-2zM27 1h7v7h-7zM2 2v5h5v-5zM20 2h1v1h-1zM28 2v5h5v-5zM3 3h3v3h-3zM11 3h1v1h-1zM13 3h2v1h-2zM22 3h1v1h-1zM29 3h3v3h-3zM9 4h2v1h1v-1h1v3h-1v1h1v1h-1v1h-3v1h-1v-1h-1v-1h2zM15 4h1v4h1v-2h1v2h1v1h2v1h-1v1h-1v-1h-1v-1h-3v-2h-1v-2h1zM18 4h2v1h1v-1h1v2h-1v1h-1v1h-1v-3h-1zM23 4h3v2h-2v-1h-1zM10 6v2h1v-2zM13 7h1v1h-1zM21 7h1v1h-1zM23 7h1v1h1v-1h1v2h-1v1h1v1h-1v1h-1v-1h-2v1h1v1h-1v1h-1v-1h-1v1h-1v-1h-1v-1h-1v1h-1v1h-1v1h-1v2h-1v-1h-1v-1h1v-2h-2v1h-1v1h1v2h-1v-1h-1v-2h-2v-1h3v-2h1v1h2v-1h1v2h1v-1h1v-1h-2v-1h4v1h1v1h2v-2h1v-2h1zM1 9h1v1h-1zM5 9h1v1h-1zM23 9v1h1v-1zM26 9h5v1h-2v1h-1v1h-1v1h-1v-2h1v-1h-1zM33 9h1v1h-1zM2 10h2v1h-2zM6 10h1v1h-1zM32 10h1v1h-1zM4 11h2v1h1v1h-1v1h-1v-2h-1zM7 11h1v1h-1zM29 11h3v1h-3zM1 12h1v1h1v2h-1v-1h-1zM32 12h1v3h-1zM25 13h1v2h-1v1h1v1h2v2h-3v1h1v1h-2v1h-1v-2h1v-1h-3v-2h-2v1h1v2h-1v-1h-2v1h1v2h-2v1h1v1h1v-1h1v-1h1v-2h1v2h2v1h1v-1h1v2h-2v2h-1v-2h-1v-1h-1v1h-1v2h-1v-1h-2v-1h-2v-1h1v-2h1v-1h-3v-2h1v1h1v-1h1v-1h1v1h1v-2h1v-1h1v-1h1v2h1v-1h2v-1h1zM27 13h1v1h-1zM29 13h1v1h-1zM6 14h1v1h-1zM17 14h2v1h-1v1h-1zM30 14h1v1h-1zM5 15h1v1h-1zM7 15h1v1h-1zM15 15h1v2h-1zM26 15h1v1h-1zM29 15h1v1h-1zM33 15h1v1h-1zM2 16h2v1h-2zM6 16h1v1h2v1h-3v1h2v1h-2v2h-1v1h-1v1h1v1h4v-2h1v2h1v1h-1v2h-1v-2h-8v-1h2v-2h-2v-3h1v1h1v1h1v-1h-1v-1h1v-1h1v-2h1zM23 16v2h2v-1h-1v-1zM28 16h1v1h-1zM30 16h1v2h1v-2h1v1h1v1h-1v2h1v2h-1v-1h-1v-2h-3v-1h1zM1 17h1v1h1v2h-1v-1h-1zM12 17h1v1h-1zM10 18h1v1h-1zM11 19h1v1h-1zM28 19h1v1h1v2h-3v-1h1zM8 20h1v1h1v-1h1v2h-2v1h-1v-1h-1v-1h1zM12 21h1v1h-1zM31 21h1v3h-1v2h2v4h1v1h-3v-1h1v-2h-1v2h-2v1h-3v-1h-2v-2h1v-1h-1v-1h1v-1h1v-3h1v1h1v1h-1v1h1v-1h1v-1h2zM5 23h1v1h-1zM7 23h1v1h-1zM11 23h2v1h-1v1h-1zM33 23h1v3h-1v-1h-1v-1h1zM20 25h1v1h-1zM11 26h3v2h-1v1h1v1h-3v-1h1v-2h-1zM16 26h2v1h-1v1h-1v1h-1v-2h1zM21 26h1v1h-1zM26 26v3h3v-3zM1 27h7v7h-7zM18 27h1v1h1v1h2v1h-1v2h2v2h-1v-1h-2v-3h-1v-1h-1zM22 27h2v1h-1v1h-1zM27 27h1v1h-1zM2 28v5h5v-5zM3 29h3v3h-3zM9 29h1v1h-1zM16 29h1v1h-1zM14 30h2v1h-1v1h1v1h1v1h-2v-1h-1v1h-5v-1h3v-2h2zM17 30h1v2h-1zM22 30h2v1h-2zM10 31h1v1h-1zM24 31h1v1h-1zM30 31h1v3h-4v-1h2v-1h1zM18 32h1v2h-1zM25 32h1v2h-2v-1h1zM33 32h1v2h-2v-1h1z'/%3e%3c/svg%3e" style="width: 128px; height: 128px;"/><p class="notice">Scan the QR code to share this article</p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0-Attending-DroidKaigi-2019&quot;&gt;&lt;a href=&quot;#0-Attending-DroidKaigi-2019&quot; class=&quot;headerlink&quot; title=&quot;0. Attending DroidKaigi 2019&quot;&gt;&lt;/a&gt;0. A
      
    
    </summary>
    
    
      <category term="Android" scheme="https://ene.im/tags/android/"/>
    
      <category term="RecyclerView" scheme="https://ene.im/tags/recyclerview/"/>
    
      <category term="ExoPlayer" scheme="https://ene.im/tags/exoplayer/"/>
    
      <category term="2019" scheme="https://ene.im/tags/2019/"/>
    
      <category term="DroidKaigi" scheme="https://ene.im/tags/droidkaigi/"/>
    
  </entry>
  
  <entry>
    <title>2019 and stuffs</title>
    <link href="https://ene.im/2019/01/07/2019-and-stuffs/"/>
    <id>https://ene.im/2019/01/07/2019-and-stuffs/</id>
    <published>2019-01-07T11:49:42.000Z</published>
    <updated>2019-01-10T06:40:10.347Z</updated>
    
    <content type="html"><![CDATA[<p>Hi there.</p><p>So it is 2019 already, and I would like to put a few lines here. It is not something new year resolution. I’m just really bad thinking about it. But there are something happen to this blog, and also to other stuff I would like to share.</p><h2 id="1-Good-bye-github-io-hello-custom-domain"><a href="#1-Good-bye-github-io-hello-custom-domain" class="headerlink" title="1. Good bye github.io, hello custom domain"></a>1. Good bye github.io, hello custom domain</h2><p>If you see this post, it is obvious that you will see the page is served via <code>https://ene.im</code> instead of the old school <code>https://eneim.github.io</code>. This is my first step to migrate this blog from github to another platform. There is not a certain reason. Just that I keep the source code in private repository, and now I cannot affort for a paid github account so I will move it, leaving github for public repo only.</p><h2 id="2-New-theme"><a href="#2-New-theme" class="headerlink" title="2. New theme"></a>2. New theme</h2><p>Again, if you see this post, you will notice a new UI. I would like to change the look and feel of the blog, make it more readable and maybe faster. Only time will tell if I have made a right decision.</p><h2 id="3-Anything-else"><a href="#3-Anything-else" class="headerlink" title="3. Anything else"></a>3. Anything else</h2><p>Last but not least, I would like to say thanks to those who have been here, either for finding information about libraries I write, or just anything else. Having reader, and having user for the library are great motivations for me to keep up my work.</p><p>In 2019, I will revise my work, think deeper into the core and make it better.</p><p>That is, just a really short note in the early days of 2019. Hope everyone a good start and many new challenges.</p><div class="qrcode"><img id="post-qrcode" src="data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='7936' height='7936' viewBox='0 0 31 31'%3e%3cpath d='M1 1h7v7h-7zM13 1h1v1h-1zM17 1h4v1h-2v1h-1v-1h-1zM23 1h7v7h-7zM2 2v5h5v-5zM14 2h3v1h-3zM21 2h1v3h-1v-1h-1v-1h1zM24 2v5h5v-5zM3 3h3v3h-3zM9 3h3v1h-1v2h-1v3h-1zM13 3h1v1h3v1h-1v1h-1v-1h-1v1h1v1h-1v2h1v2h2v1h1v1h1v-2h1v1h1v-1h2v1h1v1h-1v1h-1v-1h-1v2h-1v-1h-2v2h-3v1h-1v-1h-1v-1h1v-1h1v1h2v-1h-1v-1h-1v-1h-2v-1h-2v-1h-1v-1h1v-3h1v2h1v-3h-1v-1h1zM17 3h1v1h-1zM25 3h3v3h-3zM18 4h2v1h-2zM17 5h1v1h2v4h-2v1h-1v-1h-1v-1h-1v-2h1v1h1v-1h-1v-1h1zM20 5h1v1h-1zM18 7v2h1v-2zM21 7h1v1h-1zM1 9h1v2h-1zM3 9h5v1h-5zM12 9v1h1v-1zM21 9h1v1h-1zM23 9h5v1h-1v1h-2v-1h-1v1h-1zM8 10h2v1h-1v1h2v1h2v2h-2v1h-1v1h1v-1h2v1h-1v1h-1v1h-1v-1h-1v-3h1v-2h-1v1h-2v1h-1v-1h-1v2h-2v3h-1v3h-1v-4h1v-4h1v1h1v-1h-1v-1h-2v-1h3v-1h4zM20 10h1v1h-1zM28 10h1v1h-1zM24 11h1v1h-1zM27 11h1v1h-1zM6 12v1h2v-1zM24 13h4v1h2v1h-3v1h3v4h-2v1h-1v-2h1v-2h-1v1h-1v-1h-1v1h-1v-2h1v-2h-1zM23 14h1v1h-1zM7 15h1v1h-1zM19 15h1v1h-1zM21 15h2v3h-2v-1h1v-1h-1zM5 16h1v1h2v1h-1v1h-1v2h-1v1h-2v-1h1v-1h1v-1h-1v-2h1zM13 17h1v3h-1v4h1v-2h2v1h1v1h1v1h-1v1h-2v-1h1v-1h-1v1h-2v1h-2v3h-1v-1h-1v-4h1v1h1v-2h1v-5h1zM15 17h5v1h-1v1h-1v2h-3v-1h1v-1h1v-1h-2zM8 18h1v3h1v-1h1v3h-2v-1h-2v-1h1v-1h-1v-1h1zM20 18h1v1h-1zM23 18h1v1h-1zM3 19h1v1h-1zM19 19h1v1h-1zM22 19h1v1h-1zM25 20h1v2h2v1h-1v4h-1v2h-1v1h-1v-1h-3v-1h-2v-2h2v-2h-1v-1h-2v-2h2v1h1v-1h4zM28 21h1v1h-1zM22 22v3h3v-3zM29 22h1v3h-1v-1h-1v-1h1zM1 23h7v7h-7zM23 23h1v1h-1zM2 24v5h5v-5zM3 25h3v3h-3zM18 25h1v1h-1zM17 26h1v1h-1zM23 26v1h-1v1h1v-1h1v1h1v-2zM28 26h1v2h1v1h-1v1h-1zM14 27h3v1h-1v1h-1v-1h-1zM13 28h1v1h1v1h-2zM17 28h1v1h-1zM9 29h1v1h-1zM11 29h1v1h-1zM18 29h1v1h-1z'/%3e%3c/svg%3e" style="width: 128px; height: 128px;"/><p class="notice">Scan the QR code to share this article</p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Hi there.&lt;/p&gt;&lt;p&gt;So it is 2019 already, and I would like to put a few lines here. It is not something new year resolution. I’m just really
      
    
    </summary>
    
    
      <category term="2019" scheme="https://ene.im/tags/2019/"/>
    
      <category term="New" scheme="https://ene.im/tags/new/"/>
    
      <category term="Update" scheme="https://ene.im/tags/update/"/>
    
  </entry>
  
  <entry>
    <title>A brief introduction to Toro 3.6.0.2802</title>
    <link href="https://ene.im/2018/08/27/introduction-to-toro-3-6-0-2802/"/>
    <id>https://ene.im/2018/08/27/introduction-to-toro-3-6-0-2802/</id>
    <published>2018-08-27T14:23:45.000Z</published>
    <updated>2019-01-09T00:12:32.980Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>I’m a bad developer. Bad developer often comes with execuse. Mine is: I’m quite bad at writing documentation, and once I write it down, it is pretty long and hard to follow.</p></blockquote><blockquote><p>This time, I want to fix it.</p></blockquote><h1 id="0-Toro-since-then"><a href="#0-Toro-since-then" class="headerlink" title="0. Toro, since then"></a>0. Toro, since then</h1><p>So, in previous blog post (which is 1 year ago :surprised:), I had a quick introduction for Toro 3, which was still in beta. And in that post, I also promised some later posts regarding how to do what and why, etc. All of those promises are not fulfilled yet … And today, 1 year since the library out of beta, I would like to make it.</p><h1 id="1-Toro-3-6-0-2802-the-version-name"><a href="#1-Toro-3-6-0-2802-the-version-name" class="headerlink" title="1. Toro 3.6.0.2802, the version name"></a>1. Toro 3.6.0.2802, the version name</h1><p>Toro, by default, doesn’t vow to be dedicated to any 3rd party library. But it comes with an extension that support ExoPlayer out of the box. ExoPlayer, in its nature, <a href="https://github.com/google/ExoPlayer/issues/3680" target="_blank" rel="noopener">doesn’t guarantee to be ‘backward compatible’ in new release</a>.</p><p>Though, it is important for me to always support latest feature/patches/bug fixes, but still keep your App works well with a certain dependency version. So, from 3.6.0, I add the 4th part to its version name, which indicates the version of ExoPlayer it supports. So from now on, you may expect to have 3.6.0.2802, 3.6.0.2804, 3.6.1.2802 and so on. It may be complicated at first, but I will always try to publish new release to support latest ExoPlayer available release (at the time I publish it), and consider to support lower version of ExoPlayer if there is request from developers.</p><h1 id="2-‘What-else-’"><a href="#2-‘What-else-’" class="headerlink" title="2. ‘What else?’"></a>2. ‘What else?’</h1><p>This is the main part of the introduction, which I plan to be in more than one posts. In this post, I will go through some why and what about this update. And in upcoming posts, I will fulfill my promise to talk about why and how to create a specific UX using Toro and its extensions.</p><h1 id="3-What’s-new-in-Toro-3-6-0-2802"><a href="#3-What’s-new-in-Toro-3-6-0-2802" class="headerlink" title="3. What’s new in Toro 3.6.0.2802"></a>3. What’s new in Toro 3.6.0.2802</h1><p>Let’s go one by one following the CHANGELOG.md</p><h2 id="3-1-Supported-ExoPlayer-version-now-included-in-version-name"><a href="#3-1-Supported-ExoPlayer-version-now-included-in-version-name" class="headerlink" title="3.1 Supported ExoPlayer version now included in version name"></a>3.1 Supported ExoPlayer version now included in version name</h2><p>Why: please go back to ‘1. Toro 3.6.0.2802, the version name’ for the answer.</p><h2 id="3-2-Container’-savePlaybackInfo-accepts-Nullable-PlaybackInfo"><a href="#3-2-Container’-savePlaybackInfo-accepts-Nullable-PlaybackInfo" class="headerlink" title="3.2 Container’ savePlaybackInfo() accepts Nullable PlaybackInfo"></a>3.2 Container’ savePlaybackInfo() accepts Nullable PlaybackInfo</h2><p>Why: There are <a href="https://github.com/eneim/toro/issues/341" target="_blank" rel="noopener">reports about NPE in this method</a>. In fact, this method is accessible from public, so it is error prone itself. But hiding it will break the compatibility. In my debug, the NPE never happended, but somehow it happened. To make it easier to control, I allow <code>Nullable</code> parameters being passed to it, the method will just ignore the <code>Null</code> value and do nothing instead.</p><h2 id="3-3-ToroExo-Config-no-longer-uses-array-of-DrmSessionManager"><a href="#3-3-ToroExo-Config-no-longer-uses-array-of-DrmSessionManager" class="headerlink" title="3.3 ToroExo Config no longer uses array of DrmSessionManager"></a>3.3 ToroExo Config no longer uses array of DrmSessionManager</h2><p>The history of this class <code>Config</code> is to help Toro to cache a pool of <code>ExoPlayer</code> instances those share the same configurations. One of the configuration is the <code>DrmSessionManager</code>. Also, I would like to be honest about that I’m not fully understand this class, and just merely adopt from ExoPlayer demo app. And it is even worse when I try to support multiple <code>DrmSessionManager</code> using as least resource as possible. This produces the array of <code>DrmSessionManager</code> in the Config.</p><p>From 3.6.0.2802, I remove this option and just use a single <code>DrmSessionManager</code>. I will investigate more time learning about this, and have more elegant support in the future.</p><h2 id="3-4-ToroExo’-createDrmSessionManager-no-longer-requires-Handler"><a href="#3-4-ToroExo’-createDrmSessionManager-no-longer-requires-Handler" class="headerlink" title="3.4 ToroExo’ createDrmSessionManager() no longer requires Handler"></a>3.4 ToroExo’ createDrmSessionManager() no longer requires Handler</h2><h2 id="3-5-New-ToroPlayer-OnErrorListener"><a href="#3-5-New-ToroPlayer-OnErrorListener" class="headerlink" title="3.5 New ToroPlayer.OnErrorListener"></a>3.5 New ToroPlayer.OnErrorListener</h2><p>Toro and its components lack of this interface for quite a long time. So here it is. Client can set it from <code>Playable</code>, <code>ToroPlayerHelper</code> and variants.</p><h2 id="3-6-ToroControlView-a-custom-UI-to-support-volume-control"><a href="#3-6-ToroControlView-a-custom-UI-to-support-volume-control" class="headerlink" title="3.6 ToroControlView: a custom UI to support volume control"></a>3.6 ToroControlView: a custom UI to support volume control</h2><p>One of the most common request to <code>Toro</code> is the ability to control a playback’s volume. I take this request quite seriously, and thought about many scenarios where it can be used. Toro has already supported this via <code>Playable#setVolumeInfo(VolumeInfo)</code> and its callback <code>ToroPlayer.OnVolumeChangeListener</code>. <code>ToroControlView</code>, on the other hand, is an extension of <code>PlayerControlView</code> plus the Volume button. This button allows user to [1] Mute/UnMute and [2] Drag to change the volume.</p><p>With the release of <code>ToroControlView</code>, Toro gives a better way to interact with playback volume from the View. To use this, client just simply use normal <code>PlayerView</code>, and apply <code>@layout/toro_exo_player_view</code> as its <code>player_layout_id</code>. This is a custom layout that uses <code>ToroControlView</code> internally.</p><h2 id="3-7-PressablePlayerSelector-beta"><a href="#3-7-PressablePlayerSelector-beta" class="headerlink" title="3.7 PressablePlayerSelector beta"></a>3.7 PressablePlayerSelector beta</h2><p>This class is a <code>PlayerSelector</code> and an <code>View.OnLongClickListener</code> at the same time. Using this with <code>Container</code> allows client to implement the following scenario: Regardless of how the playback is going, when User press to a PlayerView (long click), that PlayerView will be set to higher priority in Player candidates. Once scrolled, it that player will be selected for playback.</p><h2 id="3-8-ExoPlayerDispatcher-beta"><a href="#3-8-ExoPlayerDispatcher-beta" class="headerlink" title="3.8 ExoPlayerDispatcher beta"></a>3.8 ExoPlayerDispatcher beta</h2><p>This class is a <code>ControlDispatcher</code> of ExoPlayer’s <code>PlayerControlView</code>. Use this with <code>PlayerView</code> will allow user to control the playback using the UI. ExoPlayerDispatcher internally use a <code>PressablePlayerSelector</code> to connect to the Container to correctly update the playback position.</p><h2 id="3-9-AdsExoPlayerViewHelper-and-AdsPlayable-beta"><a href="#3-9-AdsExoPlayerViewHelper-and-AdsPlayable-beta" class="headerlink" title="3.9 AdsExoPlayerViewHelper and AdsPlayable (beta)"></a>3.9 AdsExoPlayerViewHelper and AdsPlayable (beta)</h2><p>Developers who use Toro may be familiar with <code>ExoPlayerViewHelper</code> and <code>ExoPlayable</code>. They wraps necessary implementation of ExoPlayer and ToroPlayer to allow easy integration of Toro into the App. These newly introduced classes are their extensions, allow the App to also work with Ads. This update internally uses <a href="https://github.com/google/ExoPlayer/tree/release-v2/extensions/ima" target="_blank" rel="noopener">ExoPlayer extension for IMA</a>, therefore one should be aware of this.</p><h2 id="3-10-New-demo-demo-ads"><a href="#3-10-New-demo-demo-ads" class="headerlink" title="3.10 New demo: demo-ads"></a>3.10 New demo: demo-ads</h2><p>In this update, I also aware of that <code>mopub for Android SDK</code> also updates to use ExoPlayer 2.8.2 internally. It is not that I officially support <code>mopub</code>, but it is important to support mostly used Ads SDK. So in this update, I also add new demo app: <em>demo-ads</em>. This app shows simple use case that integrate Toro with well-known Ads SDK like <code>mopub</code> and <code>IMA</code>.</p><h1 id="4-In-next-articles"><a href="#4-In-next-articles" class="headerlink" title="4. In next articles"></a>4. In next articles</h1><p>In this post, I quickly summary latest update of Toro library, with the why and what. In next articles, I would like to go in detail about how to implement a specific scenario. Hope it will fix more and more problem with media playback once may have.</p><p>Happy coding!</p><div class="qrcode"><img id="post-qrcode" src="data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='8960' height='8960' viewBox='0 0 35 35'%3e%3cpath d='M1 1h7v7h-7zM9 1h4v1h-1v1h-2v1h-1zM14 1h1v1h1v1h1v1h-1v1h-1v-1h-1zM18 1h1v1h-1zM21 1h2v3h1v1h-1v1h-3v-1h2v-2h-2v2h-1v1h-1v3h2v1h1v-1h-1v-1h1v-1h1v3h1v1h1v-1h-1v-1h2v1h1v-1h1v1h2v-1h1v2h-3v2h-1v2h-2v1h-2v-1h1v-2h1v1h1v-2h1v-1h-1v1h-3v-1h-2v1h2v1h-2v2h-1v1h-1v-2h1v-1h-1v-1h1v-2h-2v-1h-1v-1h1v-1h-1v1h-1v-2h1v-1h1v-1h2v-2h2zM25 1h1v3h-2v-1h1zM27 1h7v7h-7zM2 2v5h5v-5zM28 2v5h5v-5zM3 3h3v3h-3zM12 3h1v1h-1zM29 3h3v3h-3zM10 4h2v1h-2zM9 5h1v1h-1zM25 5h1v1h-1zM12 6h1v1h-1zM23 6h2v1h-1v1h-1zM9 7h1v1h-1zM11 7h1v1h-1zM13 7h1v1h-1zM19 7h1v1h-1zM25 7h1v1h-1zM10 8h1v1h-1zM14 8h1v1h-1zM1 9h1v1h-1zM4 9h6v2h1v-1h2v1h-1v1h-2v1h-2v-1h1v-2h-3v1h-1v-1h-1zM15 9h1v1h1v1h1v1h-1v1h-1v-2h-1v3h1v1h1v1h-2v-1h-2v-4h1v-1h1zM31 9h3v1h-3zM3 10h1v1h1v2h-1v-1h-1zM6 11h2v1h-2zM30 11h1v1h-1zM32 11h2v1h-1v3h1v6h-2v1h-1v-1h-1v-1h1v-2h1v2h1v-3h-2v1h-1v-5h1v3h1v-3h-1v-1h1zM1 12h2v1h1v1h1v1h-1v2h1v1h1v-1h2v1h-1v1h-3v-1h-3v-2h1v1h1v-2h-2zM28 12h1v2h-2v-1h1zM7 13h1v1h-1zM6 14h1v1h-1zM9 14h1v2h1v-1h1v2h1v2h-1v-1h-1v-1h-3v-1h1zM21 14h1v1h-1zM7 15h1v1h-1zM20 15h1v1h1v2h-1v-1h-1zM13 16h1v1h-1zM17 16h1v1h-1zM24 16h1v1h-1zM27 16h2v2h-2zM15 17h2v2h1v1h-1v1h1v1h-2v-3h-1zM25 17h1v3h-2v-1h1zM8 18h2v1h1v1h-1v1h1v-1h3v2h-2v1h1v1h1v1h2v1h4v1h-1v1h1v1h-1v1h-1v1h-1v-1h-4v-1h5v-1h-2v-1h-1v1h-1v-1h-1v2h-1v-1h-1v-2h1v-1h-1v1h-1v-2h1v-2h-1v1h-1v-4h-1zM19 18h2v1h1v3h1v-1h1v1h1v1h2v2h1v-4h1v1h2v2h3v2h-1v-1h-2v1h1v1h-2v4h-2v-1h-3v-2h-1v-2h-1v-2h1v1h1v-1h-1v-1h-1v1h-1v-1h-2v1h-1v1h-1v-3h1v-1h1v1h1v-1h-1v-2h-1zM2 19h1v2h1v1h-2v3h1v-1h1v1h1v1h-4v-5h1zM7 19h1v1h-1zM14 19h1v1h-1zM27 19h2v1h-1v1h-2v-1h1zM4 20h1v1h-1zM6 20h1v1h1v1h-1v1h-1v-1h-1v-1h1zM25 21h1v1h-1zM4 22h1v1h1v1h1v1h1v1h-2v-1h-1v-1h-1zM14 22h1v2h-1zM32 22h1v1h-1zM7 23h2v1h-2zM29 23v1h1v-1zM16 24h1v1h-1zM21 24h1v1h-1zM9 26h1v5h-1zM21 26h2v2h-1v-1h-1zM26 26v3h3v-3zM1 27h7v7h-7zM20 27h1v1h-1zM27 27h1v1h-1zM2 28v5h5v-5zM21 28h1v2h-1zM31 28h2v1h-2zM3 29h3v3h-3zM33 29h1v1h-1zM11 30h1v1h5v1h-1v1h-1v1h-1v-1h-1v1h-1v-2h-2v-1h1zM19 30h2v1h1v3h-2v-1h-1v-1h1v-1h-1zM22 30h1v1h-1zM24 30h1v1h3v1h-3v1h1v1h-3v-2h1zM31 31h3v1h-1v2h-1v-1h-1v1h-1v-2h1zM28 32h1v1h-1zM9 33h1v1h-1zM16 33h1v1h-1zM18 33h1v1h-1zM27 33h1v1h-1z'/%3e%3c/svg%3e" style="width: 128px; height: 128px;"/><p class="notice">Scan the QR code to share this article</p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;I’m a bad developer. Bad developer often comes with execuse. Mine is: I’m quite bad at writing documentation, and once I writ
      
    
    </summary>
    
    
      <category term="Android" scheme="https://ene.im/tags/android/"/>
    
      <category term="RecyclerView" scheme="https://ene.im/tags/recyclerview/"/>
    
      <category term="MediaPlayer" scheme="https://ene.im/tags/mediaplayer/"/>
    
      <category term="ExoPlayer" scheme="https://ene.im/tags/exoplayer/"/>
    
      <category term="Toro" scheme="https://ene.im/tags/toro/"/>
    
      <category term="Ads" scheme="https://ene.im/tags/ads/"/>
    
  </entry>
  
  <entry>
    <title>Toro 101 - Videos on RecyclerView, starts/pauses automatically when scroll</title>
    <link href="https://ene.im/2017/07/09/toro-101-how-to-1/"/>
    <id>https://ene.im/2017/07/09/toro-101-how-to-1/</id>
    <published>2017-07-08T15:59:53.000Z</published>
    <updated>2019-01-07T07:55:36.383Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Intro"><a href="#1-Intro" class="headerlink" title="1. Intro"></a>1. Intro</h2><p>With the effort I put on to rework the <a href="https://github.com/eneim/toro" target="_blank" rel="noopener">Toro</a> library, I believe that implementing <strong>auto playback playlist</strong> is easier than ever before. But with the lack of documentation skill, I’m afraid a single README or a few sample code cannot tell that to all the people who need it. So I write about it, what it does, how it can help you and how to use it with the least effort.</p><h2 id="2-Our-target"><a href="#2-Our-target" class="headerlink" title="2. Our target"></a>2. Our target</h2><p>This post will show you how to use <strong>Toro v3 (currently beta 1)</strong> to implement a dead simple Video list, that will start and pause the playback automatically. A demo looks like below:</p><img src="/2017/07/09/toro-101-how-to-1/demo_toro_1.gif"><blockquote><p><strong>Question 1</strong>: Why do I even need to do this?</p></blockquote><p><strong>Answer 1</strong>: Only if you want to implement things like Twitter timeline, Facebook feed, or Instagram, where Video starts playback automatically when user scrolls to it, and pause it when user scrolls it off screen.</p><blockquote><p><strong>Question 2</strong>: This doesn’t look like Facebook. Is it too simple?</p></blockquote><p><strong>Answer 2</strong>: First thing first. Future post will be about more complicated things, like Facebook timeline and so on. Of course you can skip this and go to the <a href="https://github.com/eneim/toro" target="_blank" rel="noopener">repo</a>, check out the <a href="https://github.com/eneim/toro/tree/dev-v3/app/src/main/java/im/ene/toro/sample" target="_blank" rel="noopener">sample code</a>. It is all there.</p><h2 id="3-Before-we-start"><a href="#3-Before-we-start" class="headerlink" title="3. Before we start"></a>3. Before we start</h2><p>Make sure the following things are in your checklist, and checked:</p><ul><li><p>You are creating an App targeting Android 16 or above. Because <strong>Toro</strong> officially supports <strong>ExoPlayer (2)</strong> which in turn supports Android downto 16, and also many advance features in Media playback start from this API onward.</p></li><li><p>You have at least basic understanding about <code>RecyclerView</code> and how to use it. Because <strong>Toro</strong> is created on top of <code>RecyclerView</code> and its eco-system, a smallest knowledge about using it is required.</p></li><li><p>You own the Videos, or at least you acknowledge your right to use them.</p></li></ul><h2 id="4-The-tutorial-step-by-step-to-create-that-cool-Video-list"><a href="#4-The-tutorial-step-by-step-to-create-that-cool-Video-list" class="headerlink" title="4. The tutorial: step-by-step to create that cool Video list."></a>4. The tutorial: step-by-step to create that cool Video list.</h2><ul><li><p>First: Create your app using Android Studio if you have not done yet. Make sure you have a project to work on :trollface:. If you use some Video from the Internet for this sample, please make sure to include the <strong>permission to connect to the Internet</strong> into your <code>manifest.xml</code>.</p></li><li><p>Add <code>Toro</code> and <code>ExoPlayer</code> to your app module’s <code>build.gradle</code> dependencies. Note that I also add <code>CardView</code> dependency to improve our UI.</p></li></ul><figure class="highlight gradle"><figcaption><span>build.gradle</span></figcaption><div style="overflow:auto"><table><tr><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="comment">// ↑ other dependencies ...</span></span><br><span class="line">    <span class="comment">// ↓ toro's dependencies and CardView</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">"im.ene.toro3:toro:3.0.0-beta1"</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">"com.google.android.exoplayer:exoplayer:r2.4.3"</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">"com.android.support:cardview-v7:26.0.0-beta2"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><ul><li>We will now setup a Video list in our Activity using the <code>Container</code> as below:</li></ul><figure class="highlight xml"><figcaption><span>activity_main.xml</span></figcaption><div style="overflow:auto"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">im.ene.toro.widget.Container</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/player_container"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br></pre></td></tr></table></div></figure><figure class="highlight java"><figcaption><span>MainActivity.java</span></figcaption><div style="overflow:auto"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Container container;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        container = findViewById(R.id.player_container);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>We will complete this Activity later.</p><ul><li>Next we will design our Video player view. This time I use a single <code>SimpleExoPlayerView</code> for our Video player. Naming the layout file as <code>view_holder_exoplayer_basic.xml</code>, the xml will look like below:</li></ul><figure class="highlight xml"><figcaption><span>view_holder_exoplayer_basic.xml</span></figcaption><div style="overflow:auto"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">android.support.v7.widget.CardView</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/card"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:cardBackgroundColor</span>=<span class="string">"@color/cardview_light_background"</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">com.google.android.exoplayer2.ui.SimpleExoPlayerView</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:id</span>=<span class="string">"@+id/player"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:minHeight</span>=<span class="string">"200dp"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">app:resize_mode</span>=<span class="string">"fixed_height"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">app:surface_type</span>=<span class="string">"texture_view"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">app:use_controller</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.v7.widget.CardView</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>One thing should be noticed here: <code>SimpleExoPlayerView</code> uses a <code>TextureView</code> or <code>SurfaceView</code> to display the Video. By default, if its height or width is 0, your Surface/SurfaceTexture will not be created. Therefore your Video will not be played. To work around this, I set a <code>minHeight</code> for it to be <code>200dp</code> which is reasonable for a <code>16:9</code> Video in portrait mode.</p><p>Also, related to the initial height of the PlayerView, my advice is to pre-calculate that height and set it to your layout so that your layout will not be resize at runtime, which gives a better UX.</p><p>In this tutorial, I use <code>TextureView</code> for the <code>SimpleExoPlayerView</code>.</p><p>Now let use that layout to create a <code>ViewHolder</code> (which implements <code>ToroPlayer</code>).</p><p>At first, your <code>ViewHolder</code> will look like this:</p><figure class="highlight java"><figcaption><span>SimplePlayerViewHolder.java (incompleted)</span></figcaption><div style="overflow:auto"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimplePlayerViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> <span class="keyword">implements</span> <span class="title">ToroPlayer</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    SimpleExoPlayerView playerView;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BasicPlayerViewHolder</span><span class="params">(View itemView)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(itemView);</span><br><span class="line">        playerView = (SimpleExoPlayerView) itemView.findViewById(R.id.player);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// some un-implemented methods below</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>Now since we are using <code>SimpleExoPlayerView</code>, <strong>Toro</strong> comes with official support for this component, via <code>SimpleExoPlayerViewHelper</code>. <code>SimpleExoPlayerViewHelper</code> requires a <code>Uri</code> to work, so we will have 2 more fields and now we can complete the implementation of <code>ViewHolder</code> as below:</p><figure class="highlight java"><figcaption><span>SimplePlayerViewHolder.java</span></figcaption><div style="overflow:auto"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimplePlayerViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> <span class="keyword">implements</span> <span class="title">ToroPlayer</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    SimpleExoPlayerView playerView;</span><br><span class="line">    SimpleExoPlayerViewHelper helper;</span><br><span class="line">    Uri mediaUri;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BasicPlayerViewHolder</span><span class="params">(View itemView)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(itemView);</span><br><span class="line">        playerView = (SimpleExoPlayerView) itemView.findViewById(R.id.player);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> View <span class="title">getPlayerView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> playerView;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> PlaybackInfo <span class="title">getCurrentPlaybackInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helper != <span class="keyword">null</span> ? helper.getLatestPlaybackInfo() : <span class="keyword">new</span> PlaybackInfo();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(Container container, PlaybackInfo playbackInfo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (helper == <span class="keyword">null</span>) &#123;</span><br><span class="line">            helper = <span class="keyword">new</span> SimpleExoPlayerViewHelper(container, <span class="keyword">this</span>, mediaUri);</span><br><span class="line">        &#125;</span><br><span class="line">        helper.initialize(playbackInfo);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (helper != <span class="keyword">null</span>) helper.play();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pause</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (helper != <span class="keyword">null</span>) helper.pause();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPlaying</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helper != <span class="keyword">null</span> &amp;&amp; helper.isPlaying();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (helper != <span class="keyword">null</span>) &#123;</span><br><span class="line">            helper.release();</span><br><span class="line">            helper = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">wantsToPlay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ToroUtil.visibleAreaOffset(<span class="keyword">this</span>, itemView.getParent()) &gt;= <span class="number">0.85</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPlayerOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getAdapterPosition();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">bind</span><span class="params">(Uri media)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mediaUri = media;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>It is worth mentioning that a correct implementation of <code>ToroPlayer</code> must provide a good result of <code>wantsToPlay()</code>, by which <code>Container</code> will know when a Player should start playback or not. In most of my sample, I use <code>ToroUtil.visibleAreaOffset()</code> which will calculate the visibility offset of the Video (not the whole View). You can always have a custom implementation (for example: Internet connected, User hit like, …). Always returning <code>false</code> will cause to no Video will be played. On the other hand, always returning <code>true</code> doesn’t guarantee that all of the Video will be played. I will talk more about this in future posts.</p><ul><li>The setup is almost done. We now only need an <code>Adapter</code> that uses the <code>SimplePlayerViewHolder</code> above and finish our setup for the <code>Container</code>.</li></ul><figure class="highlight java"><figcaption><span>SimpleAdapter.java</span></figcaption><div style="overflow:auto"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">SimplePlayerViewHolder</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    MediaList mediaList = <span class="keyword">new</span> MediaList();</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> SimplePlayerViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">        View view = LayoutInflater.from(parent.getContext())</span><br><span class="line">            .inflate(R.layout.view_holder_exoplayer_basic, parent, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimplePlayerViewHolder(view);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(SimplePlayerViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        holder.bind(Uri.parse(<span class="string">"my_awesome_video.mp4"</span>) <span class="comment">/* FIXME use real data */</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mediaList.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><figcaption><span>MainActivity.java</span></figcaption><div style="overflow:auto"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Container container;</span><br><span class="line">    SimpleAdapter adapter;</span><br><span class="line">    LinearLayoutManager layoutManager;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        container = findViewById(R.id.player_container);</span><br><span class="line">        </span><br><span class="line">        layoutManager = <span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>);</span><br><span class="line">        container.setLayoutManager(layoutManager);</span><br><span class="line">        </span><br><span class="line">        adapter = <span class="keyword">new</span> SimpleAdapter();</span><br><span class="line">        container.setAdapter(adapter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><ul><li>Now try to launch your App and see what happens. If nothing goes wrong, your list now starts the playback automatically and it also correctly switch the Video on your scroll as well.</li></ul><p>All the code above can be found in <a href="https://github.com/eneim/toro/tree/dev-v3/app/src/main/java/im/ene/toro/sample/basic" target="_blank" rel="noopener">basic demo</a> (this package includes more classes for <code>ViewPager</code> demo too. For now you can safely ignore <code>BasicListFragment</code> class).</p><h2 id="5-Conclusion-and-future-work"><a href="#5-Conclusion-and-future-work" class="headerlink" title="5. Conclusion and future work"></a>5. Conclusion and future work</h2><p>So here we are. With just a few code, we solve one of the most difficult UX in Android app. And it doesn’t stop right there. In future post, I would like to introduce more complicated implementation using Toro, with ease. All of the code is already available on <a href="https://github.com/eneim/toro/tree/dev-v3/app/src/main/java" target="_blank" rel="noopener">github/eneim/toro</a>, I will have more or less in-depth discussions as well as my thought about why and how here.</p><p>All feedback are welcome. Happy scrolling!</p><div class="qrcode"><img id="post-qrcode" src="data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='7936' height='7936' viewBox='0 0 31 31'%3e%3cpath d='M1 1h7v7h-7zM9 1h2v1h-2zM14 1h1v2h-1v1h-1v3h-1v1h-1v-2h-1v2h1v1h-1v2h-1v-1h-2v-1h2v-5h1v-1h1v1h1v-1h1v-1h1zM16 1h4v1h-1v1h1v1h2v4h-1v-1h-1v-1h1v-1h-2v-1h-1v-1h-1v-1h-1zM21 1h1v1h-1zM23 1h7v7h-7zM2 2v5h5v-5zM11 2h1v1h-1zM20 2h1v1h-1zM24 2v5h5v-5zM3 3h3v3h-3zM16 3h1v1h-1zM25 3h3v3h-3zM14 4h2v1h1v1h-2v-1h-1zM17 4h1v1h-1zM17 6h1v2h-1zM13 7h1v1h-1zM15 7h1v3h1v-1h1v-1h1v2h1v2h1v-2h1v-1h5v1h-1v1h-1v-1h-1v2h-1v1h-1v1h2v1h1v1h-1v1h-3v1h-1v-2h1v-3h-2v1h-1v-2h1v-1h-2v1h-1v1h1v1h1v2h1v2h1v3h3v-1h-1v-1h-1v-1h3v1h2v1h-1v1h2v-2h-1v-1h1v-1h-1v-2h1v1h2v1h-1v2h1v1h-1v2h-2v1h1v2h-1v2h-1v-1h-8v-1h-1v-1h-1v2h2v1h2v1h1v1h1v-1h-1v-1h2v2h1v-1h1v1h1v1h-8v-1h-1v-2h-1v1h-2v-1h1v-1h-1v1h-2v-1h1v-1h2v-2h1v-1h-2v-1h-1v1h1v2h-1v1h-1v1h-2v-1h1v-1h1v-3h-1v-1h1v-2h1v-3h1v1h1v2h-1v1h-1v1h2v1h1v-1h-1v-1h1v-3h1v-2h-1zM19 7h1v1h-1zM12 8h1v2h-1zM1 9h1v3h-1zM5 9h1v1h-1zM20 9h1v1h-1zM29 9h1v1h-1zM3 10h1v2h-1zM6 10h1v1h1v1h-2zM11 10h1v3h-1v-1h-1v-1h1zM27 10h1v2h-1zM13 11h1v3h-1zM29 11h1v2h-1zM2 12h1v2h1v-2h2v1h-1v1h1v-1h2v-1h2v1h-1v1h-2v1h2v1h1v-1h1v3h-2v-1h-1v-1h-1v1h1v1h-2v1h-2v-2h2v-2h-1v1h-2v-1h-2v-2h1zM25 12h1v3h-1v-1h-1v-1h1zM10 13h1v1h-1zM28 13h1v1h-1zM9 14h1v1h-1zM14 14h1v1h-1zM29 14h1v2h-1zM2 16h1v1h-1zM17 17v1h1v-1zM24 17h1v1h-1zM29 17h1v2h-1zM1 18h1v1h-1zM8 18h1v1h1v1h-4v-1h2zM3 19h1v1h-1zM17 19v5h1v-4h1v-1zM4 20h2v1h-2zM29 20h1v1h-1zM1 21h2v1h-2zM7 21h1v1h-1zM9 22h1v2h-1zM20 22v1h1v-1zM22 22v3h3v-3zM28 22h2v1h-1v1h-1zM1 23h7v7h-7zM23 23h1v1h-1zM2 24v5h5v-5zM20 24v1h1v-1zM3 25h3v3h-3zM27 25h2v1h-1v1h-1zM10 27h1v1h-1zM24 27h1v1h-1zM28 27h2v1h-1v1h-1zM11 28h1v2h-1zM9 29h1v1h-1zM13 29h2v1h-2zM26 29h2v1h-2z'/%3e%3c/svg%3e" style="width: 128px; height: 128px;"/><p class="notice">Scan the QR code to share this article</p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-Intro&quot;&gt;&lt;a href=&quot;#1-Intro&quot; class=&quot;headerlink&quot; title=&quot;1. Intro&quot;&gt;&lt;/a&gt;1. Intro&lt;/h2&gt;&lt;p&gt;With the effort I put on to rework the &lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="Android" scheme="https://ene.im/tags/android/"/>
    
      <category term="RecyclerView" scheme="https://ene.im/tags/recyclerview/"/>
    
      <category term="MediaPlayer" scheme="https://ene.im/tags/mediaplayer/"/>
    
      <category term="ExoPlayer" scheme="https://ene.im/tags/exoplayer/"/>
    
      <category term="Toro" scheme="https://ene.im/tags/toro/"/>
    
  </entry>
  
  <entry>
    <title>Toro 3.0 alpha 1 was born, from scratch with love</title>
    <link href="https://ene.im/2017/06/25/toro-3-0-alpha-1-was-born-from-scratch-with-love/"/>
    <id>https://ene.im/2017/06/25/toro-3-0-alpha-1-was-born-from-scratch-with-love/</id>
    <published>2017-06-25T05:45:31.000Z</published>
    <updated>2019-01-09T01:09:37.814Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL,DR:"></a>TL,DR:</h2><blockquote><p>Just in case you are interested in Video playback, especially in RecyclerView, there is something new for you: <a href="https://github.com/eneim/toro/releases/tag/3.0.0-alpha1" target="_blank" rel="noopener">https://github.com/eneim/toro/releases/tag/3.0.0-alpha1</a></p></blockquote><div style="text-align:center"><div class="github-card" data-user="eneim" data-repo="toro" data-width="400" data-theme="default" data-target="" data-client-id="" data-client-secret=""></div></div><script src="/github-card-lib/githubcard.js"></script><h4 id="A-demonstration-mimic-Facebook-timeline-and-more"><a href="#A-demonstration-mimic-Facebook-timeline-and-more" class="headerlink" title="A demonstration (mimic Facebook timeline and more)"></a>A demonstration (mimic Facebook timeline and more)</h4><div class="ytx-container"><br><div class="ytx-square"><br><object class="ytx-square-child" style="width:100%;height:100%;float:none;clear:both;margin:2px auto" data="https://www.youtube.com/embed/rSAGaNM2_t8"></object><br></div><br></div><hr><h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>After nearly a month of active development, I would like to announce that Toro has a new major update: Toro 3.0 (alpha 1). Toro 3.0 is a complete rewritten version of Toro.</p><h2 id="Update-summary"><a href="#Update-summary" class="headerlink" title="Update summary"></a>Update summary</h2><p>Toro 3.0 removes the use of static setup in Toro 2 (<code>Toro.attach/detach/init/register/unregister</code> …), which was a burden for both maintainer and users.</p><p>Instead, all the necessary logic is put into Container - an empowered RecyclerView. In fact, in the RecyclerView eco-system (RecyclerView, Adapter, LayoutManager, ViewHolder, …), RecyclerView is the least likely to be customised (comparing to Adapter and LayoutManager). With that, I put my effort to integrate the beauty of Toro 2.x into a single RecyclerView. As a result, user just need to replace their RecyclerView with Container view to have the support from Toro.</p><figure class="highlight xml"><div style="overflow:auto"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- just this and you have all the support from Toro 3.0 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">im.ene.toro.widget.Container</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/recycler_view"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></div></figure><p>Also, there is no need to implement the MediaPlayerManager which is tight to Adapter in Toro 2. I was struggling with this constraint for a long time after the release, and finally I know it must be removed. In Toro 3, there is no customisable MediaPlayerManager, its logic is instead integrated inside Container.</p><p>What user still need to do, is to implement the Player interface into the ViewHolder. This is a must, since there is no other way the Container could know if it is talking to a Player or not. But instead of dozens of methods in Toro 2.x, the ToroPlayer interface now contains only a few methods which are enough to control the<br>playback, and few more for the callback from the playback update. A simple ViewHolder implementation looks like below</p><figure class="highlight java"><div style="overflow:auto"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimelineVideoViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> <span class="keyword">implements</span> <span class="title">ToroPlayer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Nullable</span> SimpleExoPlayerViewHelper helper;</span><br><span class="line">  <span class="meta">@Nullable</span> <span class="keyword">private</span> Uri mediaUri;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@BindView</span>(R.id.fb_video_player) SimpleExoPlayerView playerView;</span><br><span class="line">  </span><br><span class="line">  TimelineVideoViewHolder(View itemView) &#123;</span><br><span class="line">    <span class="keyword">super</span>(itemView);</span><br><span class="line">    ButterKnife.bind(<span class="keyword">this</span>, itemView);</span><br><span class="line">    playerView.setVisibility(View.VISIBLE);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">void</span> <span class="title">bind</span><span class="params">(TimelineAdapter adapter, FbItem item, List&lt;Object&gt; payloads)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.bind(adapter, item, payloads);</span><br><span class="line">    <span class="keyword">if</span> (item != <span class="keyword">null</span> &amp;&amp; item <span class="keyword">instanceof</span> MediaEntity) &#123;</span><br><span class="line">      MediaUrl url = ((MediaEntity) item).getMediaUrl();</span><br><span class="line">      mediaUri = url.getUri();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@NonNull</span> <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> View <span class="title">getPlayerView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.playerView;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@NonNull</span> <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> PlaybackInfo <span class="title">getCurrentPlaybackInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> helper != <span class="keyword">null</span> ? helper.updatePlaybackInfo() : <span class="keyword">new</span> PlaybackInfo();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(@NonNull Container container, @NonNull PlaybackInfo playbackInfo)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (helper == <span class="keyword">null</span>) &#123;</span><br><span class="line">      helper = <span class="keyword">new</span> SimpleExoPlayerViewHelper(container, <span class="keyword">this</span>, mediaUri);</span><br><span class="line">    &#125;</span><br><span class="line">    helper.initialize(playbackInfo);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (helper != <span class="keyword">null</span>) helper.play();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pause</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (helper != <span class="keyword">null</span>) helper.pause();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPlaying</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> helper != <span class="keyword">null</span> &amp;&amp; helper.isPlaying();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (helper != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        helper.cancel();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">      helper = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">wantsToPlay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ViewParent parent = itemView.getParent();</span><br><span class="line">    <span class="keyword">float</span> offset = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (parent != <span class="keyword">null</span> &amp;&amp; parent <span class="keyword">instanceof</span> View) &#123;</span><br><span class="line">      offset = ToroUtil.visibleAreaOffset(playerView, (View) parent);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> offset &gt;= <span class="number">0.85</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPlayerOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getAdapterPosition();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>This release also open a way for multiple simultaneous playbacks, even though I would not recommend it. Now with a custom <code>PlayerSelector</code>, you can have the behavior like below: different number of Video playback for each row.</p><img src="/2017/06/25/toro-3-0-alpha-1-was-born-from-scratch-with-love/demo-player-selector.gif"><p>Deep down to the implementation, Toro 3.0 is no longer listen to Playback state. In fact, it was a pain in my ass when I try to follow the state machine of 3 Media player APIs (MediaPlayer, ExoPlayer 1, ExoPlayer 2) to tell Toro instance to deal with a Player when it is ready to play or when it completes the playback. In Toro 3.0, it is now just asking the Player to initialize the resource for playback, and then start it, or pause it, on demand. All the playback state update is ignore by Toro, and users will have the freedom to integrate their own callback logic.</p><p>This change will asks the users more to handle the callback by themselves, which can be hard at first. So I put 2 helpers classes to help them getting start with Toro 3.0 easier. Right now only ExoPlayer 2.+ and Android MediaPlayer are supported. And there will be no plan to support more playback SDKs. But as users will need to implement 3rd party SDK such as Youtube, Vimeo, etc, I’m always try to help as much as possible.</p><p>More detail about how to use Toro 3.0 alpha 1 can be found in README as well as the sample app. So it is highly recommended to go though the README as well as app module before asking for any implementation details.</p><p><strong>What happens with Toro 2.x</strong>: I will try to answer as much as possible, and fix fatal issues only. All up coming development will go to 3.+ and so on.</p><h2 id="Final-words"><a href="#Final-words" class="headerlink" title="Final words"></a>Final words</h2><p>I would like to write more about this release, as well as what I have learnt about <code>RecyclerView</code> while creating this and more. But for now, I will take a rest and wait for issue report.</p><h2 id="Happy-scrolling"><a href="#Happy-scrolling" class="headerlink" title="Happy scrolling!"></a>Happy scrolling!</h2><div class="qrcode"><img id="post-qrcode" src="data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='9984' height='9984' viewBox='0 0 39 39'%3e%3cpath d='M1 1h7v7h-7zM9 1h2v1h-1v1h-1zM13 1h1v3h1v2h-1v-1h-2v-1h-1v-1h1v-1h1zM15 1h1v1h-1zM18 1h1v1h1v1h-2v1h-1v1h-1v-2h1v-1h1zM24 1h1v1h2v1h1v1h-1v1h-1v1h-1v-1h-1v1h-2v-1h1v-1h2v-1h-3v-1h2zM27 1h1v1h-1zM29 1h1v4h-1v1h-1v4h-1v-3h-1v-1h1v-1h1v-1h1zM31 1h7v7h-7zM2 2v5h5v-5zM32 2v5h5v-5zM3 3h3v3h-3zM20 3h1v1h-1zM33 3h3v3h-3zM9 4h2v1h-2zM18 4h1v1h-1zM11 5h1v3h1v-2h1v3h1v2h1v2h1v1h1v-1h1v2h-3v1h-1v1h1v1h-1v3h-1v-1h-3v-1h-1v-1h-3v-1h1v-1h1v1h2v1h3v-1h-1v-1h-1v1h-1v-2h1v-1h1v1h1v-1h1v-1h-1v-1h-1v-1h1v-1h-1v1h-1v-2h-1v-2h-1v-1h1zM19 5h2v1h1v3h-1v-2h-1v1h-1v-1h-1v-1h1zM16 6h1v1h-1zM9 7h1v2h-1zM15 7h1v1h-1zM17 7h1v1h-1zM23 7h1v1h-1zM25 7h1v2h-2v-1h1zM29 7h1v1h-1zM16 8h1v1h-1zM1 9h1v2h-1zM3 9h2v2h-2zM6 9h3v1h-2v1h-1zM10 9h1v1h-1zM19 9h2v1h-1v1h-1zM22 9h1v3h-1v1h-1v-1h-1v-1h1v-1h1zM29 9h1v2h-1zM31 9h1v1h-1zM34 9h1v2h-1zM36 9h2v1h-2zM16 10h1v1h-1zM24 10h3v2h4v1h-1v1h-1v1h-1v-2h-1v1h-1v-3h-1v1h-1zM32 10h1v1h-1zM2 11h1v1h-1zM5 11h1v2h2v-1h-1v-1h2v1h1v1h-1v1h-2v1h-2v-2h-1v-1h1zM10 11h1v1h-1zM17 11h2v1h-1v1h-1zM31 11h1v1h-1zM35 11h1v3h-1v1h1v-1h2v1h-1v1h1v3h-1v-2h-1v-1h-2v-1h-1v-1h1v-2h1zM1 12h1v2h-1zM23 12h1v1h1v1h-2zM32 12h1v1h-1zM37 12h1v1h-1zM3 13h1v2h-1zM10 13h2v1h-2zM20 13h1v2h1v-1h1v2h2v1h-1v1h-1v1h-1v-2h-1v-1h-1zM31 13h1v1h-1zM25 14h1v2h-1zM30 14h1v1h2v3h-1v-2h-1v1h-1v-1h-1v-1h1zM1 15h1v1h-1zM7 15h1v1h-1zM9 15h1v1h-1zM2 16h1v1h1v1h-1v1h2v1h-1v1h-1v-1h-1v1h-1v-2h1zM4 16h1v1h-1zM6 16h1v1h-1zM17 16h1v1h-1zM27 16h2v1h-2zM18 17h1v1h1v-1h1v2h-1v1h-1v-1h-1zM26 17h1v2h-1v2h-2v1h-1v1h1v-1h4v2h-1v-1h-1v1h1v2h-1v-1h-1v-1h-1v2h-1v-2h-2v-1h1v-2h1v-2h1v1h1v-1h-1v-1h2zM29 17h1v1h-1zM5 18h1v1h-1zM28 18h1v1h1v1h-1v1h-2v-1h1zM31 18h1v2h1v-1h1v1h1v2h-1v-1h-2v1h-1v-1h-1v-1h1zM34 18h1v1h-1zM7 19h1v1h-1zM9 19h1v4h-1v1h-3v-1h2v-1h-2v-2h1v1h1v-1h1zM21 19h1v2h-1zM35 19h1v1h-1zM16 20h3v1h2v2h-1v1h-1v-1h-1v1h-1v-2h1v-1h-1v1h-1zM12 21h2v1h-1v3h1v1h-1v1h-1v-3h-1v-2h1zM4 22h1v1h-1zM14 22h1v1h1v2h-1v-1h-1zM30 22h1v1h-1zM32 22h1v1h1v4h-3v1h-1v-1h-2v1h-1v-2h1v-2h3v1h-2v1h2v-1h1v1h1v-2h-2v-1h1zM35 23h2v1h1v4h-1v-3h-1v1h-1zM2 24h2v1h-1v3h-1zM5 24h1v1h2v1h-1v1h-1v-1h-1zM18 24h1v1h-1zM20 24h1v1h-1zM9 25h2v3h-1v-2h-1zM17 25h1v1h-1zM8 26h1v3h-1v-1h-1v-1h1zM15 26h1v2h-1zM18 26h1v1h-1zM22 26h1v1h-1zM25 26h1v3h2v1h-3zM5 27h1v1h-1zM1 28h1v1h-1zM4 28h1v2h-1zM11 28h2v1h3v1h-2v2h-1v1h-4v-3h2v2h1v-1h1v-1h-2zM16 28h1v1h-1zM20 28h4v1h-1v1h-1v-1h-1v1h-1zM31 28h3v2h1v1h-1v1h2v3h1v1h-1v2h-2v-1h1v-3h-3v2h2v1h-2v1h-2v-2h1v-2h-2v-3h-1v-1h1v-1h2zM36 28h1v1h-1zM7 29h1v1h-1zM35 29h1v1h-1zM16 30h2v2h-3v-1h1zM24 30h1v1h-1zM30 30v3h3v-3zM36 30h2v2h-2zM1 31h7v7h-7zM19 31h1v2h-2v-1h1zM21 31h3v3h-1v2h-1v-3h1v-1h-2zM25 31h1v1h-1zM27 31h1v1h-1zM31 31h1v1h-1zM2 32v5h5v-5zM14 32h1v1h1v1h1v-1h1v1h1v1h1v2h1v1h-4v-1h2v-1h-1v-1h-1v2h-1v-1h-1v-2h-1zM3 33h3v3h-3zM27 33h1v1h1v1h1v1h-1v1h-2v1h-1v-1h-2v-3h1v1h1v-1h1zM9 34h1v2h-1zM13 34h1v2h-1zM37 34h1v1h-1zM11 35h1v1h1v1h-1v1h-1zM27 35v1h1v-1zM14 36h1v2h-2v-1h1zM21 36h1v1h-1zM37 36h1v2h-1zM9 37h1v1h-1z'/%3e%3c/svg%3e" style="width: 128px; height: 128px;"/><p class="notice">Scan the QR code to share this article</p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;TL-DR&quot;&gt;&lt;a href=&quot;#TL-DR&quot; class=&quot;headerlink&quot; title=&quot;TL,DR:&quot;&gt;&lt;/a&gt;TL,DR:&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;Just in case you are interested in Video pla
      
    
    </summary>
    
    
      <category term="Android" scheme="https://ene.im/tags/android/"/>
    
      <category term="RecyclerView" scheme="https://ene.im/tags/recyclerview/"/>
    
      <category term="MediaPlayer" scheme="https://ene.im/tags/mediaplayer/"/>
    
      <category term="ExoPlayer" scheme="https://ene.im/tags/exoplayer/"/>
    
      <category term="Toro" scheme="https://ene.im/tags/toro/"/>
    
      <category term="EN" scheme="https://ene.im/tags/en/"/>
    
      <category term="Dev" scheme="https://ene.im/tags/dev/"/>
    
  </entry>
  
  <entry>
    <title>(Deprecated) Why you should call setAdapter(null)</title>
    <link href="https://ene.im/2017/06/03/Why-you-should-call-setAdapter-null/"/>
    <id>https://ene.im/2017/06/03/Why-you-should-call-setAdapter-null/</id>
    <published>2017-06-03T06:44:04.000Z</published>
    <updated>2017-06-21T01:38:21.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Notice-If-you’ve-come-here-by-chance-I-want-to-say-thanks-for-the-interest"><a href="#Notice-If-you’ve-come-here-by-chance-I-want-to-say-thanks-for-the-interest" class="headerlink" title="Notice: If you’ve come here by chance, I want to say thanks for the interest."></a>Notice: If you’ve come here by chance, I want to say thanks for the interest.</h2><h2 id="And-also-want-to-have-notice-This-post-is-wrongly-representing-my-message-It-I-actually-also-uses-a-bad-example-to-raise-the-Problem-which-cause-a-misleading-discussion"><a href="#And-also-want-to-have-notice-This-post-is-wrongly-representing-my-message-It-I-actually-also-uses-a-bad-example-to-raise-the-Problem-which-cause-a-misleading-discussion" class="headerlink" title="And also want to have notice: This post is wrongly representing my message. It (I actually) also uses a bad example to raise the Problem, which cause a misleading discussion."></a>And also want to have notice: This post is wrongly representing my message. It (I actually) also uses a bad example to raise the Problem, which cause a misleading discussion.</h2><h2 id="At-the-moment-I’m-revising-my-message-as-well-as-updating-this-post-By-the-meantime-this-post-is-no-longer-a-good-place-for-reference-this-is-my-apologize"><a href="#At-the-moment-I’m-revising-my-message-as-well-as-updating-this-post-By-the-meantime-this-post-is-no-longer-a-good-place-for-reference-this-is-my-apologize" class="headerlink" title="At the moment, I’m revising my message as well as updating this post. By the meantime, this post is no longer a good place for reference, this is my apologize."></a>At the moment, I’m revising my message as well as updating this post. By the meantime, this post is no longer a good place for reference, this is my apologize.</h2><p><del><strong>TL;DR</strong>: Always call <code>RecyclerView#setAdapter(null)</code> before your <code>RecyclerView</code> is going away (in <code>onDestroy/onDestroyView/...</code>).</del></p><h1 id="1-Problem"><a href="#1-Problem" class="headerlink" title="1. Problem"></a>1. Problem</h1><p>In common tutorials about RecyclerView out there, you may see this quite frequently, inside an <code>Activity</code>‘s <code>onCreate</code> or a <code>Fragment</code>‘s <code>onCreateView</code>.</p><figure class="highlight java"><div style="overflow:auto"><table><tr><td class="code"><pre><span class="line">mAdapter = <span class="keyword">new</span> MyCoolAdapter(); <span class="comment">// here mAdapter is a member of enclosing class.</span></span><br><span class="line">recyclerView.setAdapter(adapter);</span><br></pre></td></tr></table></div></figure><p>It is pretty common step when one initialize his/her screen’s <code>RecyclerView</code>. But I rarely see people telling those “learners” what should them do on the “terminal” point. I mean, does anyone care about tearing down the RecyclerView after all?</p><p>One may ask: what’s wrong with that? Is <code>Activity</code> destroying everything after it is destroyed?</p><p>Well, for your curiosity: <strong>Will it be destroyed</strong>?</p><p>Let’s take a quick look at this question on StackOverflow: <a href="https://stackoverflow.com/questions/30132643/recyclerview-doesnt-unregister-itself-from-the-adapter-on-orientation-change" target="_blank" rel="noopener"><code>RecyclerView</code> doesn’t unregister itself from the adapter on orientation change</a>. I bet everyone can easily find the problem as well as the answer for it. But let me talk a bit more.</p><p><strong>Check points to ‘The Problem’</strong>:</p><ul><li><p>If you have used RecyclerView quite a while, you may know there are couples of useful callback for Adapter: <code>Adapter#onAttachedToRecyclerView(RecyclerView), Adapter#onDetachedFromRecyclerView(RecyclerView), Adapter#onViewAttachedToWindow(ViewHolder), Adapter#onViewDetachedFromWindow(ViewHolder)</code>.</p></li><li><p>Have you ever debuged to see when they are called? Let me sort them out for you:</p><ul><li><code>onAttachedToRecyclerView</code> is called when the Adapter is set to RecyclerView, after a call to <code>RecyclerView#setAdapter(Adapter)</code> or <code>RecyclerView#swapAdapter(Adapter, boolean)</code>. This is quite obvious.</li><li><code>onDetachedFromRecyclerView</code>, on the other hand, is called when current Adapter if going to be replaced by <strong><em>another Adapter</em></strong> (this another ‘Adapter’ can be Null). What is the point here: <strong>if you don’t replace the Adapter, this method will never be called.</strong> And what happens if an Adapter is never be “detached” from a RecyclerView? Let’s see after I explain about the other couples.</li><li><code>onViewAttachedToWindow</code> is called once RecyclerView or its LayoutManager add a View into RecyclerView (hint: go to <code>RecyclerView</code> source code and search for the following keywords: <a href="https://android.googlesource.com/platform/frameworks/support/+/refs/heads/master/v7/recyclerview/src/android/support/v7/widget/RecyclerView.java#6831" target="_blank" rel="noopener">dispatchChildAttached</a>).</li><li><code>onViewDetachedFromWindow</code>, on opposite, is called when RecyclerView or its LayoutManager detach a View from current Window.</li></ul></li><li><p>What happens when an <code>Adapter</code> is not <em>detached</em> from a <code>RecyclerView</code>? The couple of attach/detach call to an Adapter is tight to another “couple method” of Adapter: <code>registerAdapterDataObserver/unregisterAdapterDataObserver</code>. In fact, <code>registerAdapterDataObserver</code> is always called with (right before) <code>onAttachedToRecyclerView</code> and <code>unregisterAdapterDataObserver</code> is always called with (right before) <code>onDetachedFromRecyclerView</code>. In depth, <code>Adapter#registerAdapterDataObserver(AdapterDataObserver)</code> will add an instance of <code>AdapterDataObserver</code> to its observer system, to broadcast the changes to <code>RecycleView</code>‘s ecosystem. And <code>unregisterAdapterDataObserver</code> will clean it up. <code>RecyclerView</code> holds an instance of <code>RecyclerViewDataObserver</code> which is a <strong>non-static inner class</strong> that extends AdapterDataObserver (hint: go searching for <code>mObserver</code> in <code>RecyclerView</code> source code). So here you see the problem?</p></li></ul><blockquote><p>→ If <code>onDetachedFromRecyclerView</code> is not called, which is equivalent to the fact that <code>unregisterAdapterDataObserver</code> will not be called, an instance of <code>RecyclerViewDataObserver</code> will stay alive inside your <code>Adapter</code> as long as that <code>Adapter</code> is alive. <code>RecyclerViewDataObserver</code>, in turn, holds a reference to its enclosing <code>RecyclerView</code>, which in turn holds a reference to its enclosing <code>Context</code>. In this case, it is your <code>Activity</code> or <code>Fragment</code>‘s host <code>Context</code> (which is 99% an <code>Activity</code>). So your <code>Activity</code> will be held there for quite a long time, longer than you may expect.</p></blockquote><h1 id="2-The-Solution"><a href="#2-The-Solution" class="headerlink" title="2. The Solution"></a>2. The Solution</h1><p>As we have discussed quite long about the Problem, let’s see how we can solve it. Since the solution is quite obvious, I would like you to not leave here right now and maybe continue reading to the next paragraph: more motivations for you to always use this solution.</p><p>So the solution is:</p><ul><li><p>In short: remove your Adapter from the RecyclerView as soon as your RecyclerView is going to leave. Which is equivalent to calling: <code>recyclerView.setAdapter(null)</code>.</p></li><li><p>Why this solve the problem? - by calling <code>setAdapter</code> with whatever value the Adapter is (as long as it is different to current Adapter), your RecyclerView will always detach current Adapter, which means that <code>Adapter#onDetachedFromRecyclerView</code> and <code>Adapter#unregisterAdapterDataObserver</code> will properly be called. Using a null Adapter will stop the works there. That is!</p></li></ul><h1 id="3-One-more-thing"><a href="#3-One-more-thing" class="headerlink" title="3. One more thing."></a>3. One more thing.</h1><p>You may say <strong><em>well, it is not bad, but I’m not convinced yet…</em></strong>, let’s keep going a bit further.<br>There is another couple I have discussed above: <code>Adapter#onViewAttachedToWindow</code> and <code>Adapter#onViewDetachedFromWindow</code>. Let see 2 (plus 1) screenshots below to see what is the difference between calling <code>setAdapter</code> to null and not calling it.</p><p>Note: my experiment is to setup an Activity with a RecyclerView, and by pressing “Current App Stack” button I can easily make the Activity destroy/recreated. I debug on <code>RecyclerView#onChildAttachedToWindow</code> and <code>RecyclerView#onChildDetachedFromWindow</code> which is called along with those 2 methods above, respectively.</p><ul><li>Screenshot 0: after clicking to “App Stack” button, your Activity is destroyed, and by clicking to its “Snapshot” in the stack, you bring it back to life with a “recreation” (savedInstanceState is not null).</li></ul><img src="/2017/06/03/Why-you-should-call-setAdapter-null/activity-recreated.png" title="Screenshot 0: Activity is re-created"><ul><li>Screenshot 1: not calling setAdapter to null in onDestroy</li></ul><img src="/2017/06/03/Why-you-should-call-setAdapter-null/destroy-do-nothing.png" title="Screenshot 1: not calling setAdapter to null in onDestroy"><ul><li>Screenshot 2: calling setAdapter to null in onDestroy</li></ul><img src="/2017/06/03/Why-you-should-call-setAdapter-null/destroy-remove-adapter.png" title="Screenshot 2: calling setAdapter to null in onDestroy"><p>You see the difference?</p><ol><li><p>With proper call to remove the Adapter, current Views on RecyclerView are also properly detached from Window. Otherwise, your Views will not be detached, and I cannot tell where they will be after your Activity is destroyed (or maybe it will not…).</p></li><li><p>If you ignore the fact, let see further: the attached Views after your Activity is recreated are all different (see their hashCode in my Screenshot), which means that those older Views is going somewhere else, without a proper “detaching” from the old Window. Where are they? I have no idea.</p></li><li><p>Well, I maybe a bit OCD, but not seeing any “onChildDetachedFromWindow” while there is a whole bunch of “onChildAttachedToWindow” make me feel bad. Hope it is not only me out there.</p></li></ol><p>That’s all. Happy Coding!</p><div class="qrcode"><img id="post-qrcode" src="data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='8960' height='8960' viewBox='0 0 35 35'%3e%3cpath d='M1 1h7v7h-7zM9 1h1v1h1v2h-2zM12 1h1v1h-1zM14 1h1v1h1v2h3v-1h-2v-1h1v-1h1v1h2v-1h2v1h-1v1h-1v1h-1v1h1v1h-1v2h-1v-2h-1v3h2v-1h1v1h1v2h-3v2h-1v1h-1v-2h-1v-1h-1v3h1v1h1v2h-1v-1h-1v-1h-1v4h-1v-2h-1v-2h1v-1h1v-1h-1v1h-3v1h-2v-1h-2v1h2v1h-1v1h1v1h-2v2h1v1h-1v3h-1v-3h-2v1h-1v-3h1v1h2v-1h-1v-2h2v-1h-2v-2h1v-1h3v-1h-2v-2h-1v2h-1v-1h-1v1h-2v-1h1v-1h2v-1h6v1h1v1h1v-3h1v-1h-1v-2h2v3h1v1h-2v2h1v-1h3v1h1v-1h-1v-1h-1v-1h1v-1h-1v1h-1v-2h1v-1h-1v-1h-2v-2h1zM25 1h1v4h-1v-1h-1v-1h1zM27 1h7v7h-7zM2 2v5h5v-5zM23 2h1v1h-1zM28 2v5h5v-5zM3 3h3v3h-3zM22 3h1v2h1v1h1v1h-1v1h-1v-2h-1zM29 3h3v3h-3zM9 5h2v1h-2zM21 6h1v2h-1zM9 7h1v1h-1zM11 7h1v1h-1zM25 7h1v2h-2v-1h1zM1 9h1v1h-1zM23 9h1v1h-1zM26 9h1v1h2v-1h1v2h-2v1h1v3h-1v-1h-1v-1h-1v-1h1v-1h-2v1h-1v1h-1v-1h-1v-1h2v-1h2zM31 9h3v1h-3zM7 10v1h2v-1zM30 11h1v1h-1zM32 11h2v1h-2zM10 12v1h2v-1zM20 12h2v1h1v1h-2v-1h-1zM31 12h1v1h-1zM1 13h3v1h-3zM30 13h1v3h1v-3h1v2h1v5h-1v-3h-3v-1h-1v-1h1zM18 14h2v1h-1v1h-1zM24 14h1v1h-1zM26 14h1v1h-1zM1 15h1v1h-1zM20 15h1v1h-1zM22 15h2v1h-2zM2 16h2v1h-1v1h-2v-1h1zM8 16h3v1h-1v1h-1v-1h-1zM27 16h2v2h-2zM11 17h1v1h-1zM17 17h2v1h-2zM21 17h1v1h-1zM25 17h1v2h3v1h-1v1h-1v-1h-3v1h-1v-1h-3v-2h1v1h4zM15 18h2v2h-1v-1h-1zM31 18h1v3h1v2h-1v1h2v2h-1v-1h-2v-2h-2v-1h2v-1h-1v-1h1zM7 19h2v1h-2zM10 19h3v1h-3zM14 19h1v1h-1zM13 20h1v1h1v2h-1v-1h-2v-1h1zM15 20h1v1h-1zM17 20h1v1h1v1h-1v1h-1v1h-1v-2h1zM19 20h1v1h-1zM7 21h1v1h-1zM9 21h1v2h1v1h1v1h-2v-1h-3v-1h1v-1h1zM20 21h2v1h-1v1h-1zM25 21h1v2h1v2h1v-2h1v1h1v1h1v1h1v1h-2v4h-2v-1h-3v-2h-1v-2h1v-1h1v-1h-1v1h-1v-1h-1v-2h2zM28 21h1v1h-1zM1 22h1v3h2v-1h1v1h4v1h-8zM3 23h1v1h-1zM12 23h2v1h-2zM21 23h1v1h-1zM15 24h1v2h-1v2h-2v-1h1v-2h1zM18 24h1v1h-1zM17 25h1v1h-1zM20 25h1v1h-1zM23 25h1v1h-1zM9 26h1v4h1v-4h2v1h-1v1h1v1h-1v1h2v1h1v1h-1v1h-1v-1h-3v-1h-1zM16 26h1v2h-1zM19 26h1v1h-1zM21 26h1v1h-1zM26 26v3h3v-3zM1 27h7v7h-7zM20 27h1v1h-1zM22 27h1v1h-1zM27 27h1v1h-1zM2 28v5h5v-5zM15 28h1v1h-1zM17 28h1v1h-1zM21 28h1v1h-1zM23 28h1v2h1v1h3v1h-4v-1h-3v1h1v2h-2v-1h-1v-1h-1v1h-1v-1h-1v-2h1v1h2v-1h4zM31 28h3v1h-1v1h-1v-1h-1zM3 29h3v3h-3zM14 29h1v1h-1zM30 31h4v1h-1v2h-1v-1h-2zM15 32h1v2h-1zM23 32h1v1h3v1h-4zM28 32h1v1h-1zM9 33h2v1h-2zM18 33h1v1h-1z'/%3e%3c/svg%3e" style="width: 128px; height: 128px;"/><p class="notice">Scan the QR code to share this article</p></div>]]></content>
    
    <summary type="html">
    
      TL;DR Always call RecyclerView#setAdapter(null) before your RecyclerView is going away (in onDestroy/onDestroyView/...).
    
    </summary>
    
    
      <category term="Android" scheme="https://ene.im/tags/android/"/>
    
      <category term="RecyclerView" scheme="https://ene.im/tags/recyclerview/"/>
    
      <category term="EN" scheme="https://ene.im/tags/en/"/>
    
      <category term="Dev" scheme="https://ene.im/tags/dev/"/>
    
      <category term="Adapter" scheme="https://ene.im/tags/adapter/"/>
    
      <category term="Beginner" scheme="https://ene.im/tags/beginner/"/>
    
  </entry>
  
  <entry>
    <title>The future of Toro in relationship with ExoPlayer</title>
    <link href="https://ene.im/2017/04/27/The-future-of-Toro-in-relationship-with-ExoPlayer/"/>
    <id>https://ene.im/2017/04/27/The-future-of-Toro-in-relationship-with-ExoPlayer/</id>
    <published>2017-04-26T23:24:42.000Z</published>
    <updated>2017-05-12T08:34:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>I have been developed an Android library named <strong>Toro</strong>. TL;DR it is <a href="https://github.com/eneim/Toro" target="_blank" rel="noopener">here</a>.</p><h1 id="About-Toro"><a href="#About-Toro" class="headerlink" title="About Toro"></a>About Toro</h1><p>Description about this library can be found in that github repo. But in short, Toro supports the behavior of Media Playlist on RecyclerView, including auto playback and state managing (pause/resume etc). The motivation behind this comes from Facebook timeline, Instagram, etc.</p><h1 id="About-ExoPlayer"><a href="#About-ExoPlayer" class="headerlink" title="About ExoPlayer"></a>About ExoPlayer</h1><p><em>From ExoPlayer’s README</em></p><blockquote><p>ExoPlayer is an application level media player for Android. It provides an alternative to Android’s MediaPlayer API for playing audio and video both locally and over the Internet. ExoPlayer supports features not currently supported by Android’s MediaPlayer API, including DASH and SmoothStreaming adaptive playbacks. Unlike the MediaPlayer API, ExoPlayer is easy to customize and extend, and can be updated through Play Store application updates.</p></blockquote><p>Latest version of Toro are built on top of ExoPlayer 2 (and other Media playback platforms, but ExoPlayer 2 is mostly focused). More about ExoPlayer can be found <a href="https://github.com/google/ExoPlayer" target="_blank" rel="noopener">here</a> and <a href="https://medium.com/google-exoplayer" target="_blank" rel="noopener">here</a>.</p><h1 id="What-I’m-talking-about"><a href="#What-I’m-talking-about" class="headerlink" title="What I’m talking about?"></a>What I’m talking about?</h1><p>In development history of Toro, it went from supporting every Media playback platform as possible to focusing on ExoPlayer 2. It provides a common interface for playback, then it provides extensions that implement the interfaces on top of the Media playback platform. Right now you can see those extensions in the github repo. Currently Toro supports Android’s default MediaPlayer APIs, ExoPlayer 1 and ExoPlayer 2.</p><p>Since ExoPlayer 2 is now preferred over ExoPlayer 1, and Android’s MediaPlayer API is hard to use as well as maintain (which is also one of the motivation of ExoPlayer), and I’m the only active contributor of Toro, there is a need to consider the future path of the library.</p><p>In short, I love Media playback, so I’m not ending my library. But spending time to support all possible Platforms is impossible. Instead, I will push my focus to ExoPlayer 2+ from now on (in fact, I will keep support ExoPlayer 2 as long as it is under active development. Even after that, I will keep supporting the latest stable release for a reasonable duration). Furthermore, Toro comes with a pretty well modularization structure, and developing extensions are really straight-forward, I believe that supporting other platform are just the problem of time and human resources. So anyone in favor can take that part and contribute.</p><div class="qrcode"><img id="post-qrcode" src="data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='9984' height='9984' viewBox='0 0 39 39'%3e%3cpath d='M1 1h7v7h-7zM9 1h2v6h-1v-1h-1v-1h1v-1h-1zM12 1h1v1h-1zM16 1h1v1h-1zM19 1h2v1h-2zM23 1h1v1h-1zM26 1h1v1h-1zM31 1h7v7h-7zM2 2v5h5v-5zM13 2h3v1h2v1h-4v-1h-1zM21 2h1v1h2v1h-1v1h-1v3h-1v-2h-1v2h-1v-1h-1v-3h1v1h1v-1h1zM25 2h1v1h3v2h-1v3h-1v-1h-1v1h-1v-1h-1v-1h3v-1h-2zM29 2h1v1h-1zM32 2v5h5v-5zM3 3h3v3h-3zM12 3h1v4h-1zM33 3h3v3h-3zM16 6h1v1h-1zM9 7h1v1h-1zM11 7h1v2h-1v1h-1v1h1v2h-3v-1h1v-2h-4v1h-1v1h-1v-2h1v-1h6v-1h1zM13 7h1v1h-1zM15 7h1v1h-1zM17 7h1v3h-2v-2h1zM23 7h1v1h-1zM29 7h1v1h-1zM20 8h1v1h1v2h-1v-1h-2v-1h1zM26 8h1v1h-1zM1 9h1v1h-1zM27 9h4v1h-1v1h-1v1h-1v-1h-1v1h-1v-2h1zM33 9h1v1h1v1h-1v1h3v2h-1v-1h-2v1h1v1h-2v1h2v-1h1v2h-1v1h-1v-1h-2v-2h-1v-1h-1v-1h1v-1h1v1h1v-1h-1v-2h1zM35 9h3v1h-3zM11 10h1v1h-1zM13 10h2v3h-1v1h-1v1h1v1h-1v1h-1v-2h-1v-1h1v-1h1v-1h1v-1h-1zM18 10h1v1h-1zM23 10h1v1h1v1h-3v-1h1zM1 11h1v1h-1zM5 11h3v1h-1v1h-1v-1h-1zM12 11h1v1h-1zM37 11h1v1h-1zM4 12h1v1h-1zM16 12h1v1h-1zM18 12h1v1h-1zM27 12h1v1h1v2h2v2h-1v1h-1v2h-1v1h-2v2h-1v1h-1v-1h-1v1h-1v-2h2v-1h1v-1h-1v-1h3v-1h1v-1h1v-1h-1v-2h-1zM29 12h1v1h-1zM1 13h3v3h-1v1h-1v-1h-1zM5 13h1v1h-1zM7 13h1v1h-1zM15 13h1v1h1v3h-2v-1h1v-1h-1zM17 13h1v1h-1zM20 13h2v1h-2zM23 13h1v1h-1zM2 14v1h1v-1zM9 14h1v1h-1zM18 14h2v1h-1v1h1v-1h1v1h1v2h1v2h-2v-3h-2v1h1v1h-3v-2h1zM5 15h4v2h-1v-1h-2v1h2v1h-1v1h-1v-1h-1v3h1v-1h1v1h3v-1h-3v-1h1v-1h1v1h1v-2h1v1h1v3h-1v1h-4v1h-2v-1h-1v-2h-1v-2h1v-2h1zM10 15h1v1h-1zM22 15h2v1h-2zM26 15h1v1h-1zM37 15h1v1h-1zM24 16h1v1h-1zM1 17h1v1h-1zM23 17h1v1h-1zM25 17h2v1h-2zM31 17h1v1h-1zM30 18h1v1h1v-1h1v1h2v3h1v3h-1v-1h-1v1h-2v-3h2v-1h-1v-1h-3zM35 18h2v2h1v2h-1v-1h-1v-2h-1zM14 19h3v1h-2v3h-2v-1h1zM1 20h1v1h1v1h-2zM19 20h1v2h1v1h-1v1h-1v1h2v-1h1v4h-1v2h1v1h1v1h-2v2h1v1h3v2h-1v-1h-3v-1h-2v-1h1v-1h-4v1h-1v-2h-1v-1h2v-1h1v2h3v-6h-1v1h-1v1h-1v-2h-2v-1h-1v-1h1v-1h1v-2h3zM23 20h1v1h-1zM12 21h1v1h-1zM21 21h1v1h-1zM11 22h1v1h1v1h-2zM17 22v2h1v-1h1v-1zM28 22h3v1h-2v1h2v1h-1v1h1v1h1v2h1v-1h2v-1h1v1h1v1h-1v1h-1v1h-1v1h1v-1h1v1h1v-1h1v2h-1v1h-2v-1h-1v1h1v2h1v-1h1v-1h1v2h-1v1h1v1h-2v-1h-1v1h-3v-1h1v-1h1v-1h-1v-1h-1v1h-1v-1h-1v2h-1v-1h-2v1h-1v-2h2v-1h1v-2h-1v-1h1v-2h-1v2h-1v1h1v2h-2v1h-1v-1h-2v-1h1v-1h1v-1h1v-1h1v-1h-1v-2h2zM1 23h1v1h-1zM3 23h2v1h-1v3h-1v1h-1v2h-1v-5h2zM7 23h3v1h-1v1h1v-1h1v3h-1v-1h-3v1h3v2h-2v-1h-2v2h-3v-2h2v-3h3v-1h-1zM37 23h1v2h-1zM12 25h2v2h-1v-1h-1zM24 25h1v2h-1zM31 25h1v1h-1zM36 25h1v2h-1zM33 26h2v1h-2zM11 27h2v2h-1v1h-1zM14 27h2v1h1v1h-3zM23 28h1v1h1v1h-2zM30 28v1h1v-1zM7 29h1v1h-1zM13 29h1v2h-1zM17 29h2v1h-2zM37 29h1v1h-1zM9 30h1v1h1v3h-1v1h-1zM30 30v3h3v-3zM36 30h1v1h-1zM1 31h7v7h-7zM12 31h1v1h1v1h-2zM31 31h1v1h-1zM2 32v5h5v-5zM3 33h3v3h-3zM11 34h4v2h-1v-1h-3zM17 34h1v1h1v1h2v2h-1v-1h-2v1h-2v-1h1v-1h-1v-1h1zM10 36h2v1h3v1h-6v-1h1zM15 36h1v1h-1zM27 36h1v2h-1zM30 36h2v1h-2zM29 37h1v1h-1z'/%3e%3c/svg%3e" style="width: 128px; height: 128px;"/><p class="notice">Scan the QR code to share this article</p></div>]]></content>
    
    <summary type="html">
    
      ... I&#39;m not ending my library. But spending time to support all possible Platforms is impossible.
    
    </summary>
    
    
      <category term="Android" scheme="https://ene.im/tags/android/"/>
    
      <category term="ExoPlayer" scheme="https://ene.im/tags/exoplayer/"/>
    
      <category term="Toro" scheme="https://ene.im/tags/toro/"/>
    
      <category term="EN" scheme="https://ene.im/tags/en/"/>
    
      <category term="Dev" scheme="https://ene.im/tags/dev/"/>
    
  </entry>
  
  <entry>
    <title>Bye bye CI</title>
    <link href="https://ene.im/2017/02/12/Bye-bye-CI/"/>
    <id>https://ene.im/2017/02/12/Bye-bye-CI/</id>
    <published>2017-02-11T15:57:52.000Z</published>
    <updated>2017-05-12T07:01:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Why"><a href="#Why" class="headerlink" title="Why ?"></a>Why ?</h1><p><strong>TL,DR</strong>:</p><blockquote><p>Why CI?</p></blockquote><p>Publishing made easy.</p><blockquote><p>Why <strong><em>not</em></strong> CI?</p></blockquote><p>CI setting is complicated.</p><h1 id="Long-story-short"><a href="#Long-story-short" class="headerlink" title="Long story short"></a>Long story short</h1><p>I have been struggling setting up my new Wercker CI (to support private repo) for a day. It fails with some un-expected behaviour I could not explain. The same setup works well for local … I suspect the docker image CI is running in doesn’t perfectly support hexo. So I stop using CI, just manually type the deploy script on every new post.</p><p>That’s it.</p><div class="qrcode"><img id="post-qrcode" src="data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='7936' height='7936' viewBox='0 0 31 31'%3e%3cpath d='M1 1h7v7h-7zM9 1h1v2h-1zM11 1h1v1h-1zM13 1h4v1h-2v1h-3v-1h1zM18 1h3v1h-1v2h-1v-2h-1zM23 1h7v7h-7zM2 2v5h5v-5zM17 2h1v2h-1zM21 2h1v1h-1zM24 2v5h5v-5zM3 3h3v3h-3zM11 3h1v1h2v2h-1v1h-1v1h1v-1h1v2h-1v1h-1v1h-1v-1h-1v-1h-1v-2h1v1h1v-2h-1v-1h1zM25 3h3v3h-3zM9 4h1v1h-1zM15 4h2v1h-1v1h-1zM21 4h1v6h-1v1h-1v-1h-1v2h-2v-1h1v-1h-1v1h-2v1h-1v-3h1v1h1v-2h1v-1h-1v-1h1v-1h2v2h-1v1h1v1h2v-2h-1v-2h1zM14 6h1v1h-1zM15 7h1v1h-1zM19 7h1v1h-1zM1 9h1v1h-1zM3 9h2v1h1v-1h3v1h-2v1h1v1h-2v-1h-1v2h-1v-3h-1zM23 9h1v2h-1zM26 9h1v2h-1v1h-1v1h1v-1h1v1h1v1h-1v1h-1v-1h-1v1h-1v1h-1v-1h-2v2h-1v-1h-1v-1h1v-2h1v1h1v-1h1v1h1v-3h1v-1h1zM28 9h2v1h-1v2h1v1h-2zM9 10h1v2h1v1h2v1h-3v2h3v1h-1v1h1v1h2v-3h2v2h-1v1h2v1h-1v1h-1v1h-2v-1h-2v3h-2v1h-1v-3h1v1h1v-2h-2v-1h3v-1h-2v-1h1v-1h-2v2h-1v-1h-1v-1h1v-1h-1v-1h1v-1h-3v-1h4zM1 11h2v1h-1v3h-1zM12 11h1v1h-1zM16 12h1v1h-1zM19 12h1v1h-1zM21 12h1v1h-1zM15 13h1v1h1v1h-2zM18 13h1v2h-1zM4 14h1v2h2v1h-1v1h1v1h1v1h-1v1h2v1h-3v-2h-1v1h-1v1h-2v-1h1v-1h1v-1h1v-2h-3v1h-1v-2h1v-1h1v1h1zM29 14h1v4h-1v-1h-1v1h-1v1h-2v-2h-1v-1h4v-1h1zM14 15h1v1h-1zM22 16h1v1h-1zM13 17h1v1h-1zM18 18h1v1h-1zM22 18h1v3h1v-1h1v1h2v1h1v2h-2v1h1v1h1v1h-1v1h-1v-2h-1v1h-1v-1h-3v-1h-1v-2h-1v-1h-1v2h-1v-1h-1v-1h1v-1h1v-1h2v1h1v-1h1zM1 19h1v1h-1zM27 19h3v1h-1v1h-1v-1h-1zM29 21h1v3h-1zM22 22v3h3v-3zM1 23h7v7h-7zM15 23h1v2h-4v-1h3zM23 23h1v1h-1zM2 24v5h5v-5zM28 24h1v1h-1zM3 25h3v3h-3zM11 25h1v1h3v2h-1v-1h-2v1h-1v-1h-1v1h-1v-2h2zM18 25h1v1h-1zM16 26h1v1h-1zM19 26h2v1h-2zM21 27h2v1h-1v1h2v1h-3zM29 27h1v2h-2v-1h1zM13 28h1v1h1v-1h3v1h-2v1h-3zM24 28h2v2h-1v-1h-1zM9 29h1v1h-1zM11 29h1v1h-1zM19 29h1v1h-1zM27 29h1v1h-1z'/%3e%3c/svg%3e" style="width: 128px; height: 128px;"/><p class="notice">Scan the QR code to share this article</p></div>]]></content>
    
    <summary type="html">
    
      I have been struggling setting up my new Wercker CI (to support private repo) ...
    
    </summary>
    
    
      <category term="EN" scheme="https://ene.im/tags/en/"/>
    
      <category term="Dev" scheme="https://ene.im/tags/dev/"/>
    
      <category term="CI" scheme="https://ene.im/tags/ci/"/>
    
  </entry>
  
  <entry>
    <title>Migrate to wercker</title>
    <link href="https://ene.im/2017/02/11/Migrate-to-wercker/"/>
    <id>https://ene.im/2017/02/11/Migrate-to-wercker/</id>
    <published>2017-02-11T04:12:13.000Z</published>
    <updated>2017-05-12T07:01:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Prefect"><a href="#Prefect" class="headerlink" title="Prefect"></a>Prefect</h1><p>So it has been a while I have no activity on my blog. It is of course a predictable behaviour. These days, I still am wandering around, with not much to think about.</p><h1 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h1><p>Lately, there are some changes in either my private life as well as my professional activities. I would like to make my writing better, but still try to keep it staying underground before it is the time to publish it.</p><p>So I decide to move from travis to something allows me to use private github repo. And here wercker comes.</p><h1 id="What-I-did"><a href="#What-I-did" class="headerlink" title="What I did?"></a>What I did?</h1><p>Create a new private repo, copy-paste my old blog repo into this new one, re-write CI script (see werkcer.yml for more information). Finally I write this post and then push it to master.</p><h1 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h1><p>Let’s see if this post can be successfully deployed …</p><div class="qrcode"><img id="post-qrcode" src="data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='7936' height='7936' viewBox='0 0 31 31'%3e%3cpath d='M1 1h7v7h-7zM9 1h6v2h2v1h-1v2h-1v1h-1v-4h-1v3h-1v-1h-1v-2h-1v-1h-1zM19 1h1v2h-1v1h-1v-1h-1v-1h2zM21 1h1v7h-1v-4h-1v-1h1zM23 1h7v7h-7zM2 2v5h5v-5zM24 2v5h5v-5zM3 3h3v3h-3zM9 3h1v1h-1zM25 3h3v3h-3zM19 4h1v5h-1zM10 5h1v1h-1zM9 6h1v2h-1zM11 6h1v2h-1zM17 6h1v3h-1v1h2v1h1v-2h1v3h1v1h1v-1h-1v-2h2v1h1v1h1v2h-1v-1h-1v2h2v1h-1v1h-1v-1h-3v3h1v-2h2v2h1v1h-2v1h4v-1h1v-1h1v2h1v2h-1v1h1v2h-1v-1h-1v-1h-1v-1h-1v1h1v1h-1v1h-4v1h-3v-1h1v-1h1v-2h-1v-2h2v-1h-3v-2h1v-1h-1v-1h1v-2h1v1h1v-1h-1v-1h-2v-1h-1v-1h-1v1h-1v1h-1v-2h1v-2h-1v-2h1v1h1zM13 7h1v1h-1zM1 9h1v1h-1zM3 9h1v3h-1v-1h-1v-1h1zM7 9h2v2h-1v-1h-1zM13 9h1v1h1v1h-1v2h-1v3h1v1h-1v1h1v1h-1v1h1v1h-1v3h-1v-3h-2v-1h2v-2h-2v1h-1v-1h-2v-1h1v-1h-1v-1h1v-1h-1v-1h1v-1h1v-1h1v-1h1v1h1v1h1zM24 9h1v1h-1zM27 9h1v1h-1zM29 9h1v1h-1zM5 10h2v1h-1v3h-1v-1h-1v-1h1zM26 10h1v2h-1zM1 11h1v1h1v1h-1v1h-1zM7 11h1v1h-1zM29 11h1v1h-1zM10 12v1h1v1h-1v1h2v-2h-1v-1zM17 12h1v2h-1zM28 12h1v1h-1zM3 13h1v1h1v2h1v2h-2v-1h-1v2h2v1h-4v-1h1v-3h1zM29 13h1v4h-1zM6 14h1v1h-1zM16 14h1v2h1v5h-1v-1h-2v-2h2v-1h-2v-1h1zM26 14h2v3h1v1h-2v-1h-1v-1h1v-1h-1zM14 15h1v1h-1zM25 18h1v1h-1zM29 18h1v1h-1zM6 19h2v1h-1v1h2v1h-4v-2h1zM26 19h1v1h-1zM1 21h3v1h-3zM15 21h2v1h1v1h-1v1h-1v-2h-1zM9 22h1v2h-1zM14 22h1v1h-1zM22 22v3h3v-3zM1 23h7v7h-7zM18 23h2v2h-1v-1h-1zM23 23h1v1h-1zM2 24v5h5v-5zM10 24h1v2h1v2h1v1h-1v1h-3v-1h1v-1h1v-1h-1zM15 24h1v2h-4v-1h3zM17 24h1v2h-1zM3 25h3v3h-3zM27 25h1v1h-1zM16 26h1v2h-1zM26 26h1v1h3v3h-4v-1h3v-1h-4v1h-1v-2h2zM9 27h1v1h-1zM13 27h2v2h2v-1h1v2h-5v-1h1v-1h-1zM18 27h1v1h-1zM21 28h2v1h-1v1h-2v-1h1z'/%3e%3c/svg%3e" style="width: 128px; height: 128px;"/><p class="notice">Scan the QR code to share this article</p></div>]]></content>
    
    <summary type="html">
    
      Lately, there are some changes in either my private life as well as my professional activities. I would like to make my writing better, but still try to keep it staying underground before it is the time to publish it. So I decide to move from travis to something allows me to use private github repo. And here wercker comes.
    
    </summary>
    
    
      <category term="EN" scheme="https://ene.im/tags/en/"/>
    
      <category term="Dev" scheme="https://ene.im/tags/dev/"/>
    
      <category term="CI" scheme="https://ene.im/tags/ci/"/>
    
      <category term="Migrate" scheme="https://ene.im/tags/migrate/"/>
    
  </entry>
  
  <entry>
    <title>Auto deploy from Travis CI</title>
    <link href="https://ene.im/2016/08/07/Deploy-from-travis/"/>
    <id>https://ene.im/2016/08/07/Deploy-from-travis/</id>
    <published>2016-08-07T11:42:46.000Z</published>
    <updated>2017-03-11T16:03:56.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>TL,DR:</strong> I added my blog to Travis CI so every time I push something new to <em>master branch</em> of my blog repo, it will automatically generate and deploy my blog.</p><h2 id="Why-CI-Why"><a href="#Why-CI-Why" class="headerlink" title="Why CI, Why?"></a>Why CI, Why?</h2><blockquote><p><strong><em>Why not?</em></strong></p></blockquote><p>Well, this morning when I was in the train going far away from home (to the next station, actually), I would like to post something fun to my new blog. But hey, I don’t have my PC connected to the Internet, and if I really want to, I need to tether from my iPhone, which is not something cool. So I thought of how about something that help me to deploy the post after I push it to the repo. So that I can simply post new stuff just from my iPhone.</p><p>Well (again), it turns out to be easily done by setting up a CI (Continuous Integration) server, where <strong>Travis CI</strong> is one of the most famous. And most important, when I tried a <em>Google search</em> about it, <a href="https://sazzer.github.io/blog/2015/05/04/Deploying-Hexo-to-Github-Pages-with-Travis/" target="_blank" rel="noopener">this tutorial</a> comes to (almost) top. So here I have my blog setup, and after I push this post to the air, I don’t have to run the boring <code>hexo deploy</code> command again.</p><p>Just that. Have fun blogging folks.</p><p><em>P/S</em>: This post is actually created to test the CI.</p><div class="qrcode"><img id="post-qrcode" src="data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='7936' height='7936' viewBox='0 0 31 31'%3e%3cpath d='M1 1h7v7h-7zM13 1h1v1h1v1h-1v1h-1v-1h-1v-1h1zM15 1h1v1h-1zM17 1h4v1h-2v1h-1v-1h-1zM23 1h7v7h-7zM2 2v5h5v-5zM10 2h1v1h-1zM16 2h1v1h1v6h-2v2h2v2h-2v-1h-2v-1h1v-1h-1v-1h1v-2h1v1h1v-1h-1v-1h1v-1h-3v-1h2zM21 2h1v3h-1v-1h-1v-1h1zM24 2v5h5v-5zM3 3h3v3h-3zM9 3h1v1h1v1h-1v1h1v-1h1v-1h1v3h-1v1h-1v-1h-1v2h-1zM25 3h3v3h-3zM19 5h2v1h-2zM13 7h1v2h-1v1h-1v2h-2v-2h1v-1h1v-1h1zM19 7h1v2h-1zM21 7h1v1h-1zM1 9h1v1h1v-1h5v1h-1v1h-1v1h-1v-2h-1v1h-1v1h-1v3h-1zM18 9h1v1h-1zM21 9h1v1h-1zM23 9h5v1h-1v1h-2v-1h-1v1h-1zM8 10h1v3h3v2h-1v-1h-1v1h-1v1h1v-1h1v4h-3v-1h-1v-1h1v-1h-1v-1h1v-1h-2v-1h2v-1h-1v-1h1zM19 10h2v1h-2zM28 10h1v1h-1zM21 11h2v1h2v1h3v1h2v1h-3v1h3v4h-2v1h-1v-2h1v-2h-1v1h-1v-1h-1v1h-1v-2h1v-2h-1v-1h-1v1h-1v-1h-1v2h-1v-3h1zM27 11h1v1h-1zM3 13h2v2h-1v2h-1v1h-1v-1h-1v-1h1v-1h1zM13 13h3v1h-1v1h-1v-1h-1zM18 13h1v1h-1zM17 14h1v3h-1v-1h-1v-1h1zM23 14h1v1h-1zM5 15h1v1h-1zM12 15h2v1h-1v2h-1zM19 15h1v2h-1zM22 15h1v3h-2v1h-4v-1h1v-1h1v1h1v-1h2zM15 16h1v3h-1v-1h-1v-1h1zM4 17h2v1h-1v1h-2v-1h1zM9 17v1h1v-1zM1 18h1v4h-1zM13 18h1v1h-1zM23 18h1v1h-1zM6 19h2v1h-1v1h-1v1h-1v-1h-1v-1h2zM11 19h1v1h-1zM14 19h1v1h-1zM16 19h1v1h-1zM22 19h1v1h-1zM9 20h1v1h-1zM12 20h2v1h-1v1h-2v1h-2v-1h1v-1h2zM15 20h1v1h-1zM19 20h1v1h-1zM25 20h1v2h2v1h-1v4h-1v2h-1v1h-3v-1h2v-1h1v-2h-2v1h-1v2h-1v-1h-2v-1h1v-1h1v-2h-1v-1h-1v1h-1v-1h-1v-1h-1v-1h3v1h2v-1h4zM7 21h2v1h-2zM14 21h1v2h2v1h-1v1h-1v-1h-1zM28 21h1v1h-1zM22 22v3h3v-3zM29 22h1v3h-1v-1h-1v-1h1zM1 23h7v7h-7zM11 23h2v1h1v1h-2v-1h-1zM23 23h1v1h-1zM2 24v5h5v-5zM9 24h2v1h-1v1h1v2h1v1h1v1h-2v-1h-1v-1h-1zM17 24h1v1h-1zM3 25h3v3h-3zM11 25h1v1h-1zM16 25h1v1h-1zM18 25h1v2h-1v2h-2v-1h-1v2h-1v-1h-1v-3h2v1h2v-1h1zM28 26h1v2h1v1h-1v1h-1zM23 27h1v1h-1zM9 29h1v1h-1zM18 29h2v1h-2z'/%3e%3c/svg%3e" style="width: 128px; height: 128px;"/><p class="notice">Scan the QR code to share this article</p></div>]]></content>
    
    <summary type="html">
    
      I added my blog to Travis CI so every time I push something new to *master branch* of my blog repo, it will automatically generate and deploy my blog.
    
    </summary>
    
    
      <category term="Blog" scheme="https://ene.im/tags/blog/"/>
    
      <category term="EN" scheme="https://ene.im/tags/en/"/>
    
      <category term="Dev" scheme="https://ene.im/tags/dev/"/>
    
      <category term="CI" scheme="https://ene.im/tags/ci/"/>
    
      <category term="Travis" scheme="https://ene.im/tags/travis/"/>
    
  </entry>
  
  <entry>
    <title>To the Multi lang blog - English, 日本語, Tiếng Việt</title>
    <link href="https://ene.im/2016/08/07/To-the-Multilang/"/>
    <id>https://ene.im/2016/08/07/To-the-Multilang/</id>
    <published>2016-08-07T01:16:07.000Z</published>
    <updated>2017-03-11T16:02:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="A-multi-languages-blog"><a href="#A-multi-languages-blog" class="headerlink" title="A multi languages blog"></a>A multi languages blog</h2><p>As a foreigner engineer living in Japan, working with multi-platform services and open projects with other engineers all over the World, supporting multi languages is a must-have feature I would like to add to my blog.</p><p>The setup is just simple: one line of CSS, some tune-up in font family styling and you are <del>done</del> almost there.</p><p>There is one single issue which I encounter many time: does the new typeface look good everywhere, for my languages? Currently, I’m using English, Japanese and Vietnamese almost equally among them. So both of them should be nicely rendered.</p><p>As a general mobile developer, I have no favorite font family. My very basic setup will be <strong>Roboto</strong> or <strong>Noto</strong>. This blog is current using something I haven’t test yet, but if it works fine, I will leave it there.</p><p>Now there would be some non-English paragraph to test <del>foreign languages</del> some other languages.</p><h2 id="A-Japanese-Lorem-Ipsum"><a href="#A-Japanese-Lorem-Ipsum" class="headerlink" title="A Japanese Lorem Ipsum"></a>A Japanese Lorem Ipsum</h2><p>用モニシ市社みねスけ鎖絵アラ費分マク由男4校タア系際ドルゆ料方結美るきラ想転治チマ期相ちイあ者亜ま。同タケ主共クう整3独べまい市画キフミ告稿チ表関ラ政89無ぞし募示ヱクサ権用ルざ十歌みト握68演せさ既新ぎ琶名ンょ問発監す。動信出リどえて定杯レモ当79打ドクる記組ク責明ドば側意ス位牟クヱマ条着レヱ能強な告陸済蘭注ツ線物のぽべた転催野川列ばな。</p><p>無ルおねト照徳54玉うフ東質レイヤミ討告ゃン討一ヱフエソ番未チヱヌ帰物ム援宇すょレゆ認被ネヱ取展ぼど見行働迎彫慰て。投ぞじぶど州中とめ松広サシワ新十ゃリげゅ三属ヲタコ簡山ぞろゅ話満ぜる申望4帰ロナタ引受び込松正みすぽ松統お作祭ツ供担作フお検海詳暮点ろ。表外ヨ反辞タ城理さぐに替王ネ更増ユ業71界藤ッぽ年3軽内えス排視ヒトウ首村トホツ算禁在ざ制決次修級ぽゃぞも。</p><p>午相カネムサ業向シウロク転予れづり問営ハエラモ代強ラ内分リづ囲必リオ博辞でっ品安変ケ気言えッたと本航レオセ転論ドえ増口コヒセ擬5表労ヒトアレ広画てねーひ連汚ッずつこ。報カ旅応ムハリ事消証ん官堅れくラ月車だゅまど以4分べおむ一在ひちゅい心辞クぜもぱ釜所ト響併室だわ力42千つづほへ日天ふフらり多68箱僕滞よさむて。</p><h2 id="A-Vietnamese-Lorem-Ipsum"><a href="#A-Vietnamese-Lorem-Ipsum" class="headerlink" title="A Vietnamese Lorem Ipsum"></a>A Vietnamese Lorem Ipsum</h2><p>Lorem Ipsum chỉ đơn giản là một đoạn văn bản giả, được dùng vào việc trình bày và dàn trang phục vụ cho in ấn. Lorem Ipsum đã được sử dụng như một văn bản chuẩn cho ngành công nghiệp in ấn từ những năm 1500, khi một họa sĩ vô danh ghép nhiều đoạn văn bản với nhau để tạo thành một bản mẫu văn bản. Đoạn văn bản này không những đã tồn tại năm thế kỉ, mà khi được áp dụng vào tin học văn phòng, nội dung của nó vẫn không hề bị thay đổi. Nó đã được phổ biến trong những năm 1960 nhờ việc bán những bản giấy Letraset in những đoạn Lorem Ipsum, và gần đây hơn, được sử dụng trong các ứng dụng dàn trang, như Aldus PageMaker.</p><p>Trái với quan điểm chung của số đông, Lorem Ipsum không phải chỉ là một đoạn văn bản ngẫu nhiên. Người ta tìm thấy nguồn gốc của nó từ những tác phẩm văn học la-tinh cổ điển xuất hiện từ năm 45 trước Công Nguyên, nghĩa là nó đã có khoảng hơn 2000 tuổi. Một giáo sư của trường Hampden-Sydney College (bang Virginia - Mỹ) quan tâm tới một trong những từ la-tinh khó hiểu nhất, “consectetur”, trích từ một đoạn của Lorem Ipsum, và đã nghiên cứu tất cả các ứng dụng của từ này trong văn học cổ điển, để từ đó tìm ra nguồn gốc không thể chối cãi của Lorem Ipsum. Thật ra, nó được tìm thấy trong các đoạn 1.10.32 và 1.10.33 của “De Finibus Bonorum et Malorum” (Đỉnh tối thượng của Cái Tốt và Cái Xấu) viết bởi Cicero vào năm 45 trước Công Nguyên. Cuốn sách này là một luận thuyết đạo lí rất phổ biến trong thời kì Phục Hưng. Dòng đầu tiên của Lorem Ipsum, “Lorem ipsum dolor sit amet…” được trích từ một câu trong đoạn thứ 1.10.32.</p><p>Trích đoạn chuẩn của Lorem Ipsum được sử dụng từ thế kỉ thứ 16 và được tái bản sau đó cho những người quan tâm đến nó. Đoạn 1.10.32 và 1.10.33 trong cuốn “De Finibus Bonorum et Malorum” của Cicero cũng được tái bản lại theo đúng cấu trúc gốc, kèm theo phiên bản tiếng Anh được dịch bởi H. Rackham vào năm 1914.</p><h2 id="Last-but-not-least-Programming-languages"><a href="#Last-but-not-least-Programming-languages" class="headerlink" title="Last but not least: Programming languages"></a>Last but not least: Programming languages</h2><p>Talking to languages, with an engineer, there should not be forgotten about Programming languages. I would like to have beautiful code block for some of my most familiar Programming languages. Let’s try some.</p><h4 id="1-Java"><a href="#1-Java" class="headerlink" title="1. Java"></a>1. Java</h4><figure class="highlight java"><div style="overflow:auto"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.app;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Application;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        AndroidThreeTen.init(<span class="keyword">this</span>); <span class="comment">// init the lib here</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><h4 id="2-XML"><a href="#2-XML" class="headerlink" title="2. XML"></a>2. XML</h4><figure class="highlight xml"><div style="overflow:auto"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Copyright 2016 Google Inc.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment">  you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">  distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">  See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">  limitations under the License.</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">vector</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:width</span>=<span class="string">"360dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:height</span>=<span class="string">"200dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:viewportWidth</span>=<span class="string">"360"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:viewportHeight</span>=<span class="string">"200"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">"hash"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:pathData</span>=<span class="string">"M39,45L39,80 M57,45L57,80 M66,54L31,54 M66,71L31,71"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:strokeColor</span>=<span class="string">"@color/indigo_400"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:strokeLineCap</span>=<span class="string">"round"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:strokeWidth</span>=<span class="string">"@dimen/hashtag_stroke_width"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">"i_body"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:pathData</span>=<span class="string">"M83,82L107,82A2,2 0,0 1,109 84L109,155A2,2 0,0 1,107 157L83,157A2,2 0,0 1,81 155L81,84A2,2 0,0 1,83 82z"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:strokeColor</span>=<span class="string">"@color/indigo_400"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:strokeWidth</span>=<span class="string">"@dimen/hashtag_stroke_width"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">"i_dot"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:pathData</span>=<span class="string">"M94,59m-14,0a14,14 0,1 1,28 0a14,14 0,1 1,-28 0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:strokeColor</span>=<span class="string">"@color/indigo_400"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:strokeWidth</span>=<span class="string">"@dimen/hashtag_stroke_width"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">"o"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:pathData</span>=<span class="string">"M159.5,119.5m-37.5,0a37.5,37.5 0,1 1,75 0a37.5,37.5 0,1 1,-75 0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:strokeColor</span>=<span class="string">"@color/indigo_400"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:strokeWidth</span>=<span class="string">"@dimen/hashtag_stroke_width"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">vector</span>&gt;</span></span><br></pre></td></tr></table></div></figure><h4 id="3-Javascript"><a href="#3-Javascript" class="headerlink" title="3. Javascript"></a>3. Javascript</h4><figure class="highlight javascript"><div style="overflow:auto"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">'Hello World!'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Example app listening on port 3000!'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></div></figure><h4 id="4-Gist"><a href="#4-Gist" class="headerlink" title="4. Gist"></a>4. Gist</h4><script src="//gist.github.com/55df01e092520a6d33a4.js?file=BadgeTabLayout.java"></script><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Well, let’s be multi-lang.</p><div class="qrcode"><img id="post-qrcode" src="data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='7936' height='7936' viewBox='0 0 31 31'%3e%3cpath d='M1 1h7v7h-7zM9 1h5v1h-2v1h-1v2h-2v-1h1v-1h-1zM17 1h4v1h-1v2h-1v-2h-2zM23 1h7v7h-7zM2 2v5h5v-5zM15 2h1v3h5v-2h1v3h-1v1h-1v1h-1v-2h-3v3h2v-1h1v1h2v-2h1v3h-1v1h-1v2h1v1h1v-1h1v1h1v-3h1v1h2v1h1v1h-1v1h-1v-1h-1v1h-1v1h-1v-1h-2v1h-2v-1h1v-1h-2v3h-1v2h1v1h1v1h2v-1h1v-2h1v3h1v-1h1v1h2v1h1v2h-2v1h1v1h1v1h-1v1h-1v-2h-1v1h-1v-1h-3v-1h-1v-2h-1v1h-2v-2h1v-1h-1v-1h-1v2h-3v1h1v1h1v-1h1v2h-3v-1h-1v-5h-2v-1h-1v4h-5v-1h-1v-2h1v1h1v1h1v-1h1v1h1v-1h-1v-1h1v-1h-1v-1h2v-1h1v1h1v1h2v-1h1v2h2v-1h-1v-3h-1v-4h1v1h1v1h-1v1h1v-1h3v-2h-2v-1h-2v-4h-1v-1h-2v-1h2v-1h1zM24 2v5h5v-5zM3 3h3v3h-3zM25 3h3v3h-3zM11 5h1v3h-1v-1h-1v-1h1zM13 6h1v2h-1zM9 7h1v2h-1zM17 7h1v1h-1zM12 8h1v2h-1v1h-4v-1h-2v-1h3v1h2v-1h1zM1 9h1v1h1v1h1v1h-2v-1h-1zM3 9h2v1h-2zM23 9h1v2h-1zM26 9h1v2h-2v-1h1zM28 9h2v1h-1v2h1v1h-2zM5 10h1v1h-1zM13 10h1v1h-1zM7 11h1v1h-1zM12 11h1v2h-1zM1 12h1v1h-1zM5 12h2v1h-2zM8 12h2v1h-2zM21 12h1v1h-1zM4 13h1v2h-1zM7 13h1v1h-1zM10 13h1v2h1v1h-2zM1 14h2v1h-1v1h1v1h1v-1h1v-1h1v1h1v1h-1v1h-1v1h-1v-1h-3zM29 14h1v4h-1v-1h-1v1h-1v1h-2v-2h-1v-1h4v-1h1zM3 15h1v1h-1zM7 15h1v1h-1zM16 15v1h1v-1zM12 16h1v1h-1zM22 16h1v1h-1zM19 17h2v1h-1v1h-1zM6 18h1v1h-1zM1 19h1v1h-1zM5 19h1v1h-1zM27 19h3v1h-1v1h-1v-1h-1zM13 20v1h1v-1zM2 21h1v1h-1zM29 21h1v3h-1zM9 22h1v1h1v1h-1v1h-1zM22 22v3h3v-3zM1 23h7v7h-7zM23 23h1v1h-1zM2 24v5h5v-5zM28 24h1v1h-1zM3 25h3v3h-3zM11 25h2v2h-1v-1h-1zM18 25h1v2h-2v-1h1zM9 26h2v1h-1v1h-1zM14 26h1v2h-1v2h-5v-1h1v-1h1v1h1v-1h1v-1h1zM20 26h1v1h-1zM19 27h1v1h-1zM21 27h2v1h-1v2h-1zM29 27h1v2h-2v-1h1zM16 28h2v1h-1v1h-2v-1h1zM24 28h2v2h-1v-1h-1zM23 29h1v1h-1zM27 29h1v1h-1z'/%3e%3c/svg%3e" style="width: 128px; height: 128px;"/><p class="notice">Scan the QR code to share this article</p></div>]]></content>
    
    <summary type="html">
    
      As a foreigner engineer living in Japan, working with multi-platform services and open projects with other engineers all over the World, supporting multi languages is a must-have feature I would like to add to my blog.
    
    </summary>
    
    
      <category term="Blog" scheme="https://ene.im/tags/blog/"/>
    
      <category term="EN" scheme="https://ene.im/tags/en/"/>
    
      <category term="JP" scheme="https://ene.im/tags/jp/"/>
    
      <category term="VI" scheme="https://ene.im/tags/vi/"/>
    
  </entry>
  
  <entry>
    <title>A New Challenge</title>
    <link href="https://ene.im/2016/08/06/new-challenge/"/>
    <id>https://ene.im/2016/08/06/new-challenge/</id>
    <published>2016-08-05T16:44:24.000Z</published>
    <updated>2017-03-11T16:03:39.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="New-Challenge"><a href="#New-Challenge" class="headerlink" title="New Challenge"></a>New Challenge</h2><p>So it has been couple days since I moved on. I wanted to have/create my own tech/stuff blog for quite a long time, and in many times actually. But neither my schedule allowed me to do that, nor I myself had enough enthusiastic to do that.</p><p>But then, I move on, and at the time I’m <del>writing</del> typing this post, I turned 27. I have never considered a single day to be more special than others, including my own birthday. But of course, it is still something that Facebook notifies me when the time comes. So I decide to make a TODO list.</p><p>And the first item comes to my mind, is to have a <em>not-bad-done</em> blog, which should be a log catching my thought everyday and saving my process for times.</p><p>So here it is, after all this time.</p><p><strong>Hello World!</strong> one more time.</p><div class="qrcode"><img id="post-qrcode" src="data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='7936' height='7936' viewBox='0 0 31 31'%3e%3cpath d='M1 1h7v7h-7zM9 1h3v2h-1v2h-1v1h1v-1h3v1h-2v3h1v1h-1v1h-1v1h-1v1h1v-1h1v-1h2v1h-1v1h-1v1h2v1h-3v-1h-2v2h-2v1h-1v1h-2v-1h-2v2h-1v-3h2v-1h-2v-2h1v-1h-1v-1h1v-1h2v1h1v1h-1v1h-1v1h1v1h1v1h1v-1h-1v-1h-1v-1h1v-1h1v2h1v1h1v-1h-1v-1h1v-1h1v-2h-2v-1h2v-5h1v-2h-1zM15 1h2v1h-2zM18 1h2v1h-1v1h1v-1h1v-1h1v7h-1v-1h-1v-1h1v-2h-1v2h-1v1h-1v1h-1v-2h-2v-1h1v-1h-1v-1h2v1h1v1h1v-1h-1v-1h-1v-1h1zM23 1h7v7h-7zM2 2v5h5v-5zM24 2v5h5v-5zM3 3h3v3h-3zM12 3h1v1h-1zM25 3h3v3h-3zM10 7v1h1v-1zM13 7h1v1h1v2h3v1h1v-1h1v2h1v-2h1v-1h5v1h-1v1h-1v-1h-1v2h-1v1h-1v1h2v1h1v1h-1v1h-2v-2h-1v-2h-2v1h-1v-2h-2v-1h-2v-2h-1zM15 7h1v1h-1zM19 7h1v1h-1zM18 8h1v2h-1zM1 9h1v1h-1zM5 9h1v2h-1zM10 9v1h1v-1zM20 9h1v1h-1zM29 9h1v1h-1zM27 10h1v2h-1zM6 11h2v1h-2zM29 11h1v2h-1zM15 12h1v1h1v1h1v1h-1v2h-1v-1h-1v2h3v-2h1v-1h1v6h-1v1h-1v-2h-1v2h1v2h-1v2h1v-2h2v1h-1v1h1v1h-1v3h-1v-1h-2v-2h-1v1h-1v-1h-1v1h1v1h-2v-2h-1v-1h1v-1h-1v-5h-1v-1h2v-1h2v-1h-2v1h-1v-2h3v-1h2v-1h-2v-1h1zM24 12h2v3h-1v-1h-1zM28 13h1v1h-1zM29 14h1v2h-1zM26 15h1v1h2v1h-1v2h1v1h-1v2h-2v1h1v2h-1v2h-1v-1h-5v-1h1v-1h-1v-1h1v-1h-1v-1h3v-1h-1v-1h-1v-1h3v1h2v1h-1v1h2v-2h-1v-1h1v-1h-1zM9 16h1v3h-1zM7 17h1v1h-1zM24 17h1v1h-1zM29 17h1v2h-1zM3 19h1v2h2v1h-5v-1h2zM7 19h1v1h-1zM13 19v2h-1v3h1v1h1v-2h2v-1h-2v1h-1v-2h2v-1h1v-1zM6 20h1v1h-1zM9 20h1v4h-1v-2h-2v-1h2zM29 20h1v1h-1zM19 22h1v1h-1zM22 22v3h3v-3zM28 22h2v1h-1v1h-1zM1 23h7v7h-7zM23 23h1v1h-1zM2 24v5h5v-5zM15 24v2h1v-2zM3 25h3v3h-3zM9 25h2v1h-2zM27 25h2v1h-1v1h-1zM17 27v1h1v-1zM20 27h2v3h-2v-1h1v-1h-1zM24 27h1v1h-1zM28 27h2v1h-1v1h-1zM10 28h1v2h-2v-1h1zM23 28h1v1h1v1h-2zM15 29h1v1h-1zM26 29h2v1h-2z'/%3e%3c/svg%3e" style="width: 128px; height: 128px;"/><p class="notice">Scan the QR code to share this article</p></div>]]></content>
    
    <summary type="html">
    
      Hello World one more time.
    
    </summary>
    
    
      <category term="Blog" scheme="https://ene.im/tags/blog/"/>
    
      <category term="EN" scheme="https://ene.im/tags/en/"/>
    
  </entry>
  
</feed>
